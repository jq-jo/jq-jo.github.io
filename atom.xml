<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JQ Blog]]></title>
  <link href="http://jq-jo.github.io/atom.xml" rel="self"/>
  <link href="http://jq-jo.github.io/"/>
  <updated>2018-01-11T14:48:42+09:00</updated>
  <id>http://jq-jo.github.io/</id>
  <author>
    <name><![CDATA[Jo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[オブジェクトモデル]]></title>
    <link href="http://jq-jo.github.io/blog/2018/01/11/object-model/"/>
    <updated>2018-01-11T12:02:58+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/01/11/object-model</id>
    <content type="html"><![CDATA[<h2>オープンクラス</h2>

<p>下記のメソッドは文字列からアルファベットとスペース以外を取り除くメソッド</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">to_alphanumeric</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/[^\w\s]/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>オープンクラスを使えば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_alphanumeric</span>
</span><span class='line'>    <span class="nb">gsub</span> <span class="sr">/[^\w\s]/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書くこともできる。<br/>
標準クラスの<code>String</code>を書き換える。すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;!a #b+c&quot;</span><span class="o">.</span><span class="n">to_alphanumeric</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;a bc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに適用される。</p>

<h2>クラス定義</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;my_method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method2</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;my_method2&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class C</code>を定義してまた<code>class C</code>をさらに定義するとどうなるだろう。<br/>
<code>class C</code>を上書きすると思ったが実際叩いてみたら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span>
</span><span class='line'><span class="n">my_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method2</span>
</span><span class='line'><span class="n">my_method2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>上書きじゃなく、<code>class C</code>に追加する形になる。</p>

<h2>定数</h2>

<p>定数はディレクトリとファイルのようにパスで呼び出すことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="no">MyConstant</span> <span class="o">=</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>    <span class="no">MyConstant</span> <span class="o">=</span> <span class="s2">&quot;12345&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">::</span><span class="no">MyConstant</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">::</span><span class="n">C</span><span class="o">::</span><span class="no">MyConstant</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;12345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>クラスオブジェクト</h2>

<p>クラスオブジェクトをみてみるため、<code>"hello"</code>からたどり着いてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Class</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:allocate</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:superclass</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Object</span>
</span><span class='line'>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">BasicObject</span>
</span><span class='line'>
</span><span class='line'><span class="no">BasicObject</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Module</span>
</span><span class='line'>
</span><span class='line'><span class="no">Module</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Object</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうなんだ！と思いながら１つ気になる点がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Class</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Object</code>の<code>class</code>は<code>Class</code>。<br/>
でも、<code>Class</code>の<code>superclass</code>は<code>module</code>であり、<code>module</code>の<code>superclass</code>は<code>Object</code>。<br/>
では<code>Class</code>の上位classの<code>Object</code>は<code>Class</code>？
ちゃんと理解ができていない。。これは今度深く調べてみよう。</p>

<h2>self</h2>

<h4>class定義の時のself</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">C</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;CC:0x007ffbe8a67e08&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>method</code>内での<code>self</code>はオブジェクトを指す。<code>method</code>外での<code>self</code>はクラスを指す。</p>

<h4>privateキーワードのself</h4>

<p>privateメソッドのルール：「明示的なレシーバーをつけて呼び出せない」
下記は明示的なselfをつけているのでエラーとなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method</span>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="kp">private</span> <span class="nb">method</span> <span class="sb">`private_method&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>selfを削除すると動作するようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>    <span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method</span>
</span><span class='line'>
</span><span class='line'><span class="no">ABCDE</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p>本「メタプログラミングRuby」第1章</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのblock, Proc, Lambda]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/27/block-proc-lambda/"/>
    <updated>2017-12-27T10:50:28+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/27/block-proc-lambda</id>
    <content type="html"><![CDATA[<h2>ブロック</h2>

<h3>ブロックとは</h3>

<ul>
<li>do~endまたは{~}で囲われた引数となるためのもの</li>
<li>それ単体では存在できず、メソッドの引数にしかなれない</li>
<li>引数として渡されたブロックは、yieldによって実行される</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>説明</h4>

<ul>
<li>引数を明示</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>「&amp;」とは<br/>
<code>&amp;</code>を付けることで、実際に引数にブロックが渡ってきた際、<br/>
Procオブジェクトに変換している。</p></li>
<li><p>Procオブジェクトとは</p>

<ul>
<li>ブロックをオブジェクト化したものがProc

<ul>
<li>ブロックをオブジェクトに変換することで、引き渡されたメソッド内で扱えるようにする</li>
</ul>
</li>
<li>Procオブジェクトは、callで呼び出すことが出来る</li>
</ul>
</li>
<li><p>注意点<br/>
引数として渡せるブロックは一つだけ。</p></li>
<li><p>yieldが使える<br/>
引数として渡されるブロックが１つに限られているならば、呼び出し箇所を<code>block.call</code>と明示せずに、yieldで統一する。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#メソッド定義</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>さらに、<br/>
<code>yield</code>を使うなら引数の<code>(&amp;block)</code>はいらないので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに省略できる。</p>

<h2>Proc</h2>

<ul>
<li>ブロックをオブジェクト化したものがProc</li>
<li>Procオブジェクトはcallで呼び出すことが出来る</li>
<li>Procに引数を持つこともできる</li>
<li>Proc.newとlambdaはほぼ同義</li>
</ul>


<h3>Procオブジェクトの定義と呼び出し</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hoge&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procに引数が渡された場合</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;Proc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, Proc!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Proc.newとlambdaはほぼ同義</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lambda1</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">p</span> <span class="s2">&quot;hoge&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lambda1</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda2</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lambda2</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;Proc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, Proc!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procとlambdaの違い</h3>

<ul>
<li>lambdaはブロックの引数の数が違うとエラーを起こしてくれる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda1</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lambda1</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">2</span> <span class="k">for</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>明示的にreturnやbreakを行った場合の挙動が違います。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_proc</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">p</span> <span class="s2">&quot;proc&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;method_proc&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">method_proc</span>
</span><span class='line'><span class="o">=&gt;</span><span class="s2">&quot;proc&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">method_lambda</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="k">return</span> <span class="nb">p</span> <span class="s2">&quot;lambda&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nb">lambda</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;method_lambda&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">method_lambda</span>
</span><span class='line'><span class="o">=&gt;</span><span class="s2">&quot;lambda&quot;</span>
</span><span class='line'>  <span class="s2">&quot;method_lambda&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ブロックやProcのメリット</h2>

<h3>柔軟に拡張できる</h3>

<p>下のコードのようにメソッドを汎用的に使うことができる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">someProc</span><span class="p">)</span>
</span><span class='line'>  <span class="n">someProc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">sum_proc</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">string_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">string</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">string</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="s1">&#39;hello_proc! &#39;</span><span class="p">,</span> <span class="n">string_proc</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello_proc! hello_proc! hello_proc! hello_proc! hello_proc! &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クロージャとしての機能が得られる</h3>

<h4>サンプル①</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;bye&#39;</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span><span class='line'><span class="n">bar</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello, Jo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>サンプル②</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<h3>block_given?</h3>

<h4>block_given?とは</h4>

<p>引数としてブロックが与えられたかどうかを判別するメソッド。</p>

<h4>使い方</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">greet_method</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="s1">&#39;hello!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;ブロックがありません。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">greet_method</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">greet_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ブロックがありません。&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="https://qiita.com/kidach1/items/15cfee9ec66804c3afd2">https://qiita.com/kidach1/items/15cfee9ec66804c3afd2</a><br/>
<a href="https://qiita.com/ryo-ma/items/24c46592b45775e8644d">https://qiita.com/ryo-ma/items/24c46592b45775e8644d</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Storage]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/25/active-storage/"/>
    <updated>2017-12-25T10:49:14+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/25/active-storage</id>
    <content type="html"><![CDATA[<p>Rails5.2の新しい機能の中に<code>Active Storage</code>というものが気になったので使ってみた。</p>

<h2>Active Storageとは</h2>

<p>AWS S3やGoogle Cloud Storageなどのクラウドファイルストレージサービスへのアップロードをシンプルにやってくれる仕組みとのこと。<br/>
もちろん物理的なディスクシステムへ保存することもできるけど、主眼はあくまでクラウドサービスに置いているらしい。</p>

<h2>Modelの仕組</h2>

<p>Active Storageをインストールすると<code>active_storage_blobs</code>,<code>active_storage_attachments</code>が生成される。</p>

<p><code>active_storage_blobs</code>は<code>metadata (filename, content-type, etc.)</code>を保存する<code>table</code>になっている。<code>key</code>カラムは<code>identifier key</code>としてクラウドファイルストレージのアップするファイルのfilenameになる。</p>

<p><img src="https://monosnap.com/file/xyt2cDYuvKTA8VzYhA6XzqTwcN8Nwh.png" style="width: 50%;">
<img src="https://monosnap.com/file/kNPH6J23jIHAywqUdjDYRHfp7V86iB.png" style="width: 50%;"></p>

<p><code>active_storage_attachments</code>は添付ファイルの親モデルと<code>active_storage_blobs</code>をアソシエートしてくれる。親モデルはpolymorphicになる。<br/>
<img src="https://monosnap.com/file/YOHUlhsSpV1Nt5COr0YZX4RdI7KXD4.png" style="width: 50%;"></p>

<h2>使い方</h2>

<ul>
<li>環境

<ul>
<li>Rails 5.2.0.beta2</li>
<li>ruby 2.4.1p111</li>
</ul>
</li>
</ul>


<h3>インストール</h3>

<p><code>rails new</code>を通してプロジェクトを作成するとき自動的に<code>Active Storage</code>がインストールされる。<br/>
<code>rails new --skip-active-storage</code>にするとインストールせずにプロジェクトを作成できる。</p>

<p>既存プロジェクトに<code>Active Storage</code>を入れたい場合は、まず<code>Rails</code>のバージョンをアップグレードしてから、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails active_storage:install
</span><span class='line'>bundle exec rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>で入れることができる。</p>

<h3>サンプルコード</h3>

<ul>
<li>gemfile</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mini_magick&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.8&#39;</span> <span class="c1"># 画像の加工のために</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk-s3&#39;</span> <span class="c1"># S3へのアップロード</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>model</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">has_one_attached</span> <span class="ss">:avatar</span> <span class="c1"># has_oneの場合</span>
</span><span class='line'>  <span class="n">has_many_attached</span> <span class="ss">:images</span> <span class="c1"># has_manyの場合</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>controller</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span> <span class="ow">and</span> <span class="k">return</span> <span class="k">unless</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">avatar</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:avatar</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">avatar</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">images</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:images</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">users_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>view</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:images</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">multiple</span><span class="p">:</span> <span class="kp">true</span> <span class="c1"># has_manyの場合</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;作成&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>クラウド設定</h4>

<ul>
<li>config/environments/development.rb</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Store uploaded files on the local file system (see config/storage.yml for options)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_storage</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="ss">:amazon</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>config/storage.yml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)</span>
</span><span class='line'><span class="l-Scalar-Plain">amazon</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">S3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access_key_id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_ACCESS_KEY&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">secret_access_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_SECRET_KEY&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_REGION&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">bucket</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_BUCKET&#39;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>リサイズ</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">=</span> <span class="n">image_tag</span> <span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">variant</span><span class="p">(</span><span class="ss">resize</span><span class="p">:</span> <span class="s1">&#39;200x200&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように<code>variant</code>メソッドを使えばリサイズでビューに表示できる。<br/>
<small>
参照：<a href="https://github.com/rails/rails/blob/master/activestorage/app/models/active_storage/variant.rb">https://github.com/rails/rails/blob/master/activestorage/app/models/active_storage/variant.rb</a>
</small></p>

<h4>Direct upload</h4>

<p>JSを使って<code>Direct upload</code>することもできる。</p>

<ul>
<li><p>include activestorage.js</p>

<ul>
<li>asset pipelineの場合</li>
</ul>


<pre><code class="javascript">//= require activestorage
</code></pre>

<ul>
<li>npm packageの場合</li>
</ul>


<pre><code class="javascript">import * as ActiveStorage from "activestorage"
ActiveStorage.start()
</code></pre></li>
<li><p>file_fieldに設定</p>

<ul>
<li>ビューの file_field に direct_upload: true を入れる</li>
</ul>


<pre><code class="slim">= f.file_field :avatar, direct_upload: true
</code></pre></li>
</ul>


<h2>サンプル</h2>

<p><a href="https://active-storage-jo.herokuapp.com">https://active-storage-jo.herokuapp.com</a></p>

<h2>参考</h2>

<p><a href="https://qiita.com/nashirox/items/e63fd28d974ecf12f0e7">https://qiita.com/nashirox/items/e63fd28d974ecf12f0e7</a><br/>
<a href="https://github.com/rails/rails/tree/master/activestorage">https://github.com/rails/rails/tree/master/activestorage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyにおけるObserverパターン]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/19/observer-pattern-by-ruby/"/>
    <updated>2017-12-19T18:45:15+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/19/observer-pattern-by-ruby</id>
    <content type="html"><![CDATA[<h2>Observerパターン</h2>

<h3>サンプル①</h3>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payroll</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために小切手を切ります！&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;彼の給料はいま</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">です！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:salary</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">payroll</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>    <span class="vi">@payroll</span> <span class="o">=</span> <span class="n">payroll</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="vi">@payroll</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="n">payroll</span><span class="p">)</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">35000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">35000</span><span class="err">です！</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは<code>Payroll</code>の<code>update</code>だけ指定されていて汎用的ではない。</p>

<h3>サンプル②</h3>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payroll</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために小切手を切ります！&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;彼の給料はいま</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">です！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:salary</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">payroll</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span><span class="o">=</span><span class="mi">35000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">35000</span><span class="err">です！</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードに新しいクラスを出してそのクラスも適用してみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TaxMan</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">に新しい税金の請求書を送ります！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tax_man</span> <span class="o">=</span> <span class="no">TaxMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">tax_man</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">90000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">90000</span><span class="err">です！</span>
</span><span class='line'><span class="no">Jo</span><span class="err">に新しい税金の請求書を送ります！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプル③（モジュール化）</h3>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Subject</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:salary</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">tax_man</span> <span class="o">=</span> <span class="no">TaxMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">payroll</span><span class="p">)</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">tax_man</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">90000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">90000</span><span class="err">です！</span>
</span><span class='line'><span class="no">Jo</span><span class="err">に新しい税金の請求書を送ります！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプル④（コードブロック）</h3>

<p>Rubyで<code>Observable</code>というライブラリを提供してくれるけど、<code>Observable</code>はコードブロックをサポートしてくれない。<br/>
次のコードはコードブロックに対する対応になる。</p>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Subject</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:salary</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span> <span class="k">do</span> <span class="o">|</span><span class="n">changed_employee</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために小切手を切ります！&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;彼の給料はいま</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">です！&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">90000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">90000</span><span class="err">です！</span>
</span></code></pre></td></tr></table></div></figure>


<h2>RailsのActiveRecord::Observer</h2>

<p>Railsでは<code>ActiveRecord::Observer</code>を提供している。<br/>
<code>rails-observers</code>という<code>Gem</code>を通して使用できる。</p>

<h3>インストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-observers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rails</span><span class="o">-</span><span class="n">observers</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<p><code>name</code>カラムを持っている<code>User</code>というモデルがあるとしてこの<code>User</code>モデルに対する<code>Observer</code>を作成してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">observer</span> <span class="n">user</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、<code>app/models/user_observer.rb</code>というルートで生成される。<br/>
そのファイルにクラスを定義する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserObserver</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_save</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">が保存されました。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>あと、<code>application.rb</code>に設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">observers</span> <span class="o">=</span> <span class="ss">:user_observer</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>observer</code>が複数の場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">observers</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:user_observer</span><span class="p">,</span> <span class="ss">:team_observer</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにもできる。</p>

<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">が保存されました。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>その他</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NotificationsObserver</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>  <span class="n">observe</span> <span class="ss">:comment</span><span class="p">,</span> <span class="ss">:like</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># notifiy users of new comment or like</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>observe</code>を指定すると指定されたモデルのみ<code>observe</code>することもできる。</p>

<h2>終わり</h2>

<p>RubyのObserverパターンと<code>ActiveRecord::Observer</code>を調べながら<br/>
Railsで提供しているライブラリ<code>ActiveRecord::Callbacks</code>と少し似ていると思った。</p>

<h2>参考</h2>

<p>本 - Rubyによるデザインパターン<br/>
<a href="https://github.com/rails/rails-observers">https://github.com/rails/rails-observers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PubSubとObserver]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/06/pubsub-and-observer-in-rails/"/>
    <updated>2017-12-06T15:22:06+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/06/pubsub-and-observer-in-rails</id>
    <content type="html"><![CDATA[<h2>PubSub</h2>

<h3>PubSubとは</h3>

<blockquote><p>出版-購読型モデル（しゅっぱん-こうどくがたモデル、英: Publish/subscribe）は、非同期メッセージングパラダイムの一種であり、メッセージの送信者（出版側）が特定の受信者（購読側）を想定せずにメッセージを送るようプログラムされたものである。出版されたメッセージにはクラス分けされ、購読者に関する知識を持たない。購読側は興味のあるクラスを指定しておき、そのクラスに属するメッセージだけを受け取り、出版者についての知識を持たない。出版側と購読側の結合度が低いため、スケーラビリティがよく、動的なネットワーク構成に対応可能である。</p></blockquote>

<p>参照：<a href="https://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB">出版-購読型モデル（ウィキペディア）</a></p>

<h3>利点</h3>

<p>出版側と購読側は疎結合されており、相手の存在を知る必要もない。トピックに関して通信さえできれば、両者はシステムのネットワーク構成も知る必要がない。また、相手の状態がどうであろうと個々のシステムは正常に稼動し続ける。一般的な密結合のクライアントサーバモデルでは、クライアントはサーバ上でサーバプロセスが動作していないときはメッセージを送ることが出来ないし、サーバはクライアントが動作していないときはメッセージを受け取れない。出版-購読型モデルでは、出版側と購読側を位置的に分離すると同時に、時間的にも分離する。出版-購読型システムの戦略として、出版側がダウンしていても、バックログを使って購読側が動作し続けるようにできる（帯域幅調整の一種）。</p>

<h3>欠点</h3>

<p>ブローカー（サーバ）を使った出版-購読型システムでは、購読側がブローカーに対してメッセージ送信を要求するのは帯域内で行われ、セキュリティ問題が発生する可能性がある。ブローカーを騙して間違ったクライアントにメッセージを送らせたり、クライアントがサービスを受けられないようにすることが考えられる。購読の正当性を検証するようにした場合、ブローカーが過負荷に陥る可能性もある。ブローカーを使わないシステムでも、購読側が認証されていないメッセージを受信する可能性がある。認証されていない出版側は不正で損害を与えるようなメッセージをシステム内に送り込む可能性がある。これはシステムがブロードキャストやマルチキャストを使っているために発生する。このような不正アクセスに対する防御策としては、今のところ暗号化（SSL/TLSなど）しかない。</p>

<h3>RailsのPubSub</h3>

<p>Railsでは前記事を書いてた<a href="https://jq-jo.github.io/blog/2017/03/02/rails5-action-cable/">ActionCable</a>がPubSubモデルを利用して使われている。<br/>
<code>RailsGuide（日本語版）</code>にはこう書いてある。</p>

<blockquote><p>Action Cableは、 WebSocketとRailsのその他の部分をシームレスに統合するためのものです。Action Cable が導入されたことで、Rails アプリケーションの効率の良さとスケーラビリティを損なわずに、通常のRailsアプリケーションと同じスタイル・方法でリアルタイム機能をRubyで記述できます。クライアント側のJavaScriptフレームワークとサーバー側のRubyフレームワークを同時に提供する、フルスタックのフレームワークです。Active RecordなどのORMで書かれたすべてのドメインモデルにアクセスできます。</p>

<p>Pub/Subは出版-購読型モデルとも呼ばれる、メッセージキューのパラダイムです。出版側（Publisher）が、購読側（Subscriber）の抽象クラスに情報を送信します。 このとき、個別の受信者を指定しません。Action Cableでは、このアプローチを採用してサーバーと多数のクライアント間で通信を行います。</p></blockquote>

<p>参照：<a href="https://railsguides.jp/action_cable_overview.html">RailsGuide（日本語版）</a></p>

<h2>Observer</h2>

<h3>Observerパターンとは</h3>

<p>ウィキペディアにはObserverパターンに対してこう書いてある。</p>

<blockquote><p>Observer パターン（オブザーバ・パターン）とは、プログラム内のオブジェクトの状態を観察（英: observe）するようなプログラムで使われるデザインパターンの一種。出版-購読型モデルとも呼ばれる。暗黙的呼び出しの原則と関係が深い。</p>

<p>分散イベント処理システムの実装に主に使われる。言語によっては、このパターンで扱われる問題は言語が持つイベント処理構文で処理される。リアルタイムのアプリケーション配置の手段として興味深い機能である。</p></blockquote>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e2/Observer-pattern-class-diagram.png" alt="" /></p>

<p>参考：<a href="https://ja.wikipedia.org/wiki/Observer_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Observer パターン（ウィキペディア）</a></p>

<p>つまり、出版者（Subject）に対して購読者（Observer）は監視するし、出版者に何かの変更があればそれに対する処理を行うということになる。</p>

<h3>RailsのObserverパターン</h3>

<p>Rubyには<code>observable</code>というModuleがあって監視できるようになっている。</p>

<h4>サンプルコード</h4>

<ul>
<li>Employee(サブジェクト)：従業員を表す</li>
<li>Payroll(オブザーバ1)：給与の小切手の発行を行う</li>
<li>TaxMan(オブザーバ2)：税金の請求書の発行を行う</li>
</ul>


<p>まずは従業員を表すEmployeeクラスは、name, title, salaryといったデータと、salaryの変更を受け付けるメソッドを持っている。
さらに、Employeeクラスに<code>observable</code>を<code>include</code>する。
<code>observable</code>で用いるメソッドは次のとなる。</p>

<ul>
<li><code>add_observer</code>メソッドで通知する先のオブジェクトを追加</li>
<li><code>changed</code>メソッドと<code>notify_observers</code>メソッドでオブジェクトに通知</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;observer&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Observable</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:salary</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span>   <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@title</span>  <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>    <span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">taxman</span>  <span class="o">=</span> <span class="no">TaxMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">add_observer</span><span class="p">(</span><span class="n">payroll</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_observer</span><span class="p">(</span><span class="n">taxman</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">changed</span>
</span><span class='line'>    <span class="n">notify_observers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に給与の小切手の発行を行うPayrollクラスと、税金の請求書の発行を行うTaxManクラスを作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payroll</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;彼の給料は</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">になりました！</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために新しい小切手を切ります。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TaxMan</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">に新しい税金の請求書を送ります&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>コードはここまでになるので、コンソールで確認してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="s1">&#39;System Team member&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">)</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">6000</span>
</span><span class='line'><span class="c1">#=&gt; 彼の給料は6000になりました！Joのために新しい小切手を切ります。</span>
</span><span class='line'><span class="c1">#=&gt; Joに新しい税金の請求書を送ります</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">7000</span>
</span><span class='line'><span class="c1">#=&gt; 彼の給料は7000になりました！Joのために新しい小切手を切ります。</span>
</span><span class='line'><span class="c1">#=&gt; Joに新しい税金の請求書を送ります</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうにRubyでObserverの機能を使える。</p>

<h2>参照</h2>

<p><a href="https://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB">出版-購読型モデル（ウィキペディア）</a><br/>
<a href="https://ja.wikipedia.org/wiki/Observer_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Observer パターン（ウィキペディア）</a><br/>
<a href="https://railsguides.jp/action_cable_overview.html">RailsGuide（日本語版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PubSubHubbub]]></title>
    <link href="http://jq-jo.github.io/blog/2017/11/29/pubsubhubbub/"/>
    <updated>2017-11-29T13:42:07+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/11/29/pubsubhubbub</id>
    <content type="html"><![CDATA[<h2>PubSubHubbubとは</h2>

<blockquote><p>PubSubHubbub (パブサブハブバブ) とは、更新情報を Google にリアルタイムで通知することができるプロトコルです。略して、PuSH (プッシュ) とも呼ばれます。Pub は Publisher (配信)、Sub は Subscriber (購読) を意味しており、その間に Hub というサービス (中間サーバ) があるため、このような名前になっています。配信側がコンテンツを更新すると、Hub が購読側に通知を行います。購読側は更新情報をすぐに知ることができるため、リアルタイムの情報配信が実現できる仕組みになっています。</p></blockquote>

<p>参照 - <a href="https://murashun.jp/blog/20150915-01.html">https://murashun.jp/blog/20150915-01.html</a></p>

<h2>PubSubHubbubにリクエストを送る方法</h2>

<p>PubSubHubbubにリクエストを送る場合は、下記のURLにPOSTでリクエストを送る。</p>

<p><strong> <a href="http://pubsubhubbub.appspot.com/">http://pubsubhubbub.appspot.com/</a> </strong></p>

<p>リクエストを送る場合、dataとして<code>hub.mode</code>に<code>publish</code>を設定し、<code>hub.url</code>に<code>フィードのURL</code>を設定する。また、<code>Content-Type</code>には<code>application/x-www-form-urlencoded</code>を設定する。</p>

<h2>PubSubHubbub対応に使えるGems</h2>

<ul>
<li><a href="https://github.com/igrigorik/PubSubHubbub">igrigorik/PubSubHubbub</a></li>
<li><a href="https://github.com/Gargron/pubsubhubbub">Gargron/pubsubhubbub</a></li>
<li><a href="https://github.com/shiro16/nagareboshi">shiro16/nagareboshi</a></li>
</ul>


<p>とりあえずgithubのstarsが<code>igrigorik/PubSubHubbub</code>の方が多かったのでこれの使い方を少しみてみる。<br/>
- Simple client example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">EventMachine</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pub</span> <span class="o">=</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">PubSubHubbub</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://pubsubhubbub.appspot.com/publish&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">publish</span> <span class="s2">&quot;http://www.test.com/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">callback</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Successfully notified hub.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">errback</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Uh oh, something broke: </span><span class="si">#{</span><span class="n">pub</span><span class="o">.</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Posting multiple URL&rsquo;s</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">EventMachine</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">feeds</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;http://www.test.com&quot;</span><span class="p">,</span> <span class="s2">&quot;http://www.test.com/2&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">pub</span> <span class="o">=</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">PubSubHubbub</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://pubsubhubbub.appspot.com/publish&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">publish</span> <span class="n">feeds</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">callback</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Successfully notified hub.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">errback</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Uh oh, something broke: </span><span class="si">#{</span><span class="n">pub</span><span class="o">.</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p><a href="https://qiita.com/tackeyy/items/0d2079d901d495f50c1e">https://qiita.com/tackeyy/items/0d2079d901d495f50c1e</a><br/>
<a href="https://murashun.jp/blog/20150915-01.html">https://murashun.jp/blog/20150915-01.html</a><br/>
<a href="https://github.com/igrigorik/PubSubHubbub">https://github.com/igrigorik/PubSubHubbub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastodon把握 - ③（FollowServiceの処理）]]></title>
    <link href="http://jq-jo.github.io/blog/2017/11/22/mastodon-follow02/"/>
    <updated>2017-11-22T13:40:02+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/11/22/mastodon-follow02</id>
    <content type="html"><![CDATA[<h2>callメソッド</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">source_account</span><span class="p">,</span> <span class="n">uri</span><span class="p">)</span>
</span><span class='line'>  <span class="n">target_account</span> <span class="o">=</span> <span class="no">ResolveRemoteAccountService</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span> <span class="k">if</span> <span class="n">target_account</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">target_account</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">source_account</span><span class="o">.</span><span class="n">id</span> <span class="o">||</span> <span class="n">target_account</span><span class="o">.</span><span class="n">suspended?</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">Mastodon</span><span class="o">::</span><span class="no">NotPermittedError</span>  <span class="k">if</span> <span class="n">target_account</span><span class="o">.</span><span class="n">blocking?</span><span class="p">(</span><span class="n">source_account</span><span class="p">)</span> <span class="o">||</span> <span class="n">source_account</span><span class="o">.</span><span class="n">blocking?</span><span class="p">(</span><span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="n">source_account</span><span class="o">.</span><span class="n">following?</span><span class="p">(</span><span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">target_account</span><span class="o">.</span><span class="n">locked?</span>
</span><span class='line'>    <span class="n">request_follow</span><span class="p">(</span><span class="n">source_account</span><span class="p">,</span> <span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">direct_follow</span><span class="p">(</span><span class="n">source_account</span><span class="p">,</span> <span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本的にfollowはターゲットユーザーが非公開アカウントかどうかによって処理が変わる。非公開アカウントの設定は<code>Account</code>モデルの<code>locked</code>というカラムに保存するようになっている。<br/>
まずターゲットユーザーが非公開アカウントじゃない場合から見てみると、<br/>
<code>direct_follow</code>というメソッドが呼ばれる。<br/>
<code>direct_follow</code>メソッドにはターゲットユーザーが<code>local</code>かどうかによって処理が変わる。ここの<code>local</code>っていうのは<code>Account</code>モデルの<code>domain</code>カラムがnilかどうかによって判断する。<br/>
ターゲットユーザーが<code>local</code>の場合はただメール通知が行われる。<code>local</code>じゃない場合は<code>Pubsubhubbub::SubscribeWorker</code>、<code>NotificationWorker</code>、<code>AfterRemoteFollowWorker</code>クラスが呼ばれる。</p>

<h2>Pubsubhubbub::SubscribeWorker</h2>

<ul>
<li>PubSubHubbubとは

<ul>
<li><a href="https://jq-jo.github.io/blog/2017/11/29/pubsubhubbub/">PubSubHubbub</a></li>
</ul>
</li>
<li>処理

<ul>
<li>SubscribeServiceを呼ぶ → ターゲットユーザーのAccountモデルに保存されているhub_urlを元にしてhubサーバーにrequestし、購読しているユーザーにみえるようにする。</li>
</ul>
</li>
</ul>


<h2>NotificationWorker</h2>

<ul>
<li>Salmon Protocolとは

<ul>
<li>また来週！</li>
</ul>
</li>
</ul>


<h2>AfterRemoteFollowWorker</h2>

<ul>
<li>Atom Protocolとは

<ul>
<li>また来週！</li>
</ul>
</li>
<li>処理

<ul>
<li>新しくアップデートされたターゲットユーザーの<code>locked</code>が<code>true</code>になっている場合は<code>follow</code>をキャンセルして再開<code>FollowService</code>を呼び出す。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastodon把握 - ②]]></title>
    <link href="http://jq-jo.github.io/blog/2017/11/08/mastodon-follow/"/>
    <updated>2017-11-08T17:50:45+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/11/08/mastodon-follow</id>
    <content type="html"><![CDATA[<h2>フォロー</h2>

<ul>
<li><p><strong>Flow</strong><br/>
色んな細かい処理を行なっているが大きい処理を見てみると下記のようになる。</p>

<ol>
<li>フォロー情報の保存</li>
<li>プッシュ通知</li>
<li>購読の処理</li>
</ol>
</li>
</ul>


<p><br></p>

<ul>
<li>処理Flow</li>
</ul>


<p><img src="https://monosnap.com/file/vGLBLfDyD4s5COvelDp8MYZui5pXKj.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastodon把握 - ①]]></title>
    <link href="http://jq-jo.github.io/blog/2017/10/18/mastodon-post/"/>
    <updated>2017-10-18T10:26:33+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/10/18/mastodon-post</id>
    <content type="html"><![CDATA[<h2>投稿</h2>

<ul>
<li>処理Flow</li>
</ul>


<p><img src="https://monosnap.com/file/QVqhw0WIHyJTAVI3oulFPaLhES8BMv.png" alt="Alt text" /></p>

<ul>
<li>簡単な説明

<ul>
<li>Frontend側

<ul>
<li>JSは細かくコンポーネント化になっていてそれのConnectのために<code>react-redux</code>というライブラリを利用</li>
</ul>
</li>
<li>Backend側

<ul>
<li>アーキテクチャとしてServiceクラスを主に使っている</li>
<li>それ以外には<code>app</code>の中に<code>lib</code>フォルダーを置き、処理のためのクラスを管理している</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OJ Gem]]></title>
    <link href="http://jq-jo.github.io/blog/2017/10/04/oj-gem/"/>
    <updated>2017-10-04T10:24:30+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/10/04/oj-gem</id>
    <content type="html"><![CDATA[<h3>はじめ</h3>

<p>ウェブサービスをやっていく中にはAPIを取得することが多い。今みている<code>mastodon</code>では<code>OJ</code>という<code>Json parser</code>を使っていたので調べてみた。</p>

<h3>インストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install oj</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># in Gemfile
</span><span class='line'>gem 'oj'</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'oj'
</span><span class='line'>
</span><span class='line'>h = { 'one' =&gt; 1, 'array' =&gt; [ true, false ] }
</span><span class='line'>json = Oj.dump(h)
</span><span class='line'>
</span><span class='line'># json =
</span><span class='line'># {
</span><span class='line'>#   "one":1,
</span><span class='line'>#   "array":[
</span><span class='line'>#     true,
</span><span class='line'>#     false
</span><span class='line'>#   ]
</span><span class='line'># }
</span><span class='line'>
</span><span class='line'>h2 = Oj.load(json)
</span><span class='line'>puts "Same? #{h == h2}"
</span><span class='line'># true</span></code></pre></td></tr></table></div></figure>


<h3>他のParserとの比較</h3>

<ul>
<li><a href="https://github.com/evanphx/benchmark-ips">benchmark-ips</a>でベンチマークを取る</li>
<li>比較対象

<ul>
<li>JSON</li>
<li>yajl</li>
<li>oj</li>
</ul>
</li>
</ul>


<p>まずロカールにapiのコントローラーをよいする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">JsonCompareController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">test1</span><span class="p">:</span> <span class="s1">&#39;test1&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test2</span><span class="p">:</span> <span class="s1">&#39;test2&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test3</span><span class="p">:</span> <span class="s1">&#39;test3&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test4</span><span class="p">:</span> <span class="s1">&#39;test4&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test5</span><span class="p">:</span> <span class="s1">&#39;test5&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test6</span><span class="p">:</span> <span class="s1">&#39;test6&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test7</span><span class="p">:</span> <span class="s1">&#39;test7&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test8</span><span class="p">:</span> <span class="s1">&#39;test8&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test9</span><span class="p">:</span> <span class="s1">&#39;test9&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test10</span><span class="p">:</span> <span class="s1">&#39;test10&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">json</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>それから比較するコードを書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">JsonCompare</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;yajl&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;oj&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;benchmark/ips&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compare</span>
</span><span class='line'>    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span> <span class="s2">&quot;http://localhost:3000/api/json_compare&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span> <span class="n">uri</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Benchmark</span><span class="o">.</span><span class="n">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;JSON.parse&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Yajl&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">Yajl</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Oj&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">Oj</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">compare!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Warming</span> <span class="n">up</span> <span class="o">--------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>     <span class="mi">9</span><span class="o">.</span><span class="mi">786</span><span class="n">k</span> <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                <span class="no">Yajl</span>    <span class="mi">10</span><span class="o">.</span><span class="mi">364</span><span class="n">k</span> <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                  <span class="no">Oj</span>    <span class="mi">17</span><span class="o">.</span><span class="mo">00</span><span class="mi">9</span><span class="n">k</span> <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'><span class="no">Calculating</span> <span class="o">-------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>     <span class="mi">99</span><span class="o">.</span><span class="mo">053</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="sx">%) i/s -    499.086k in   5.043910s</span>
</span><span class='line'><span class="sx">                Yajl    107.150k (± 3.4%)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>    <span class="mi">538</span><span class="o">.</span><span class="mi">928</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mo">036016</span><span class="n">s</span>
</span><span class='line'>                  <span class="no">Oj</span>    <span class="mi">183</span><span class="o">.</span><span class="mi">400</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">%</span><span class="p">)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>    <span class="mi">918</span><span class="o">.</span><span class="mi">486</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mo">012</span><span class="mi">844</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Comparison</span><span class="p">:</span>
</span><span class='line'>                  <span class="ss">Oj</span><span class="p">:</span>   <span class="mi">183399</span><span class="o">.</span><span class="mi">8</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'>                <span class="ss">Yajl</span><span class="p">:</span>   <span class="mi">107149</span><span class="o">.</span><span class="mi">6</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">71</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">:</span>    <span class="mi">99053</span><span class="o">.</span><span class="mi">1</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">85</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Benchmark::IPS::Report:0x007fdef3b04440</span>
</span><span class='line'> <span class="vi">@data</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@entries</span><span class="o">=</span>
</span><span class='line'>  <span class="o">[</span><span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdef8c3cbf0 @iterations=499086, @label=&quot;JSON.parse&quot;, @measurement_cycle=9786, @microseconds=5043910.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdef8c3cc68 @error=3164, @mean=99053.0983205518&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdef7a234a0 @iterations=538928, @label=&quot;Yajl&quot;, @measurement_cycle=10364, @microseconds=5036016.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdef7a23568 @error=3672, @mean=107149.64088869188&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdef89e6c98 @iterations=918486, @label=&quot;Oj&quot;, @measurement_cycle=17009, @microseconds=5012844.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdef89e6d10 @error=5584, @mean=183399.80361005384&gt;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>OJ</code>が<code>Yajl</code>よりは1.7倍、<code>JSON</code>よりは1.8倍速かった。<br/>
<code>String</code>じゃなくてモデルにしたらどうなるだろう。<br/>
apiコントローラーのコードを変えてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">JsonCompareController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@users</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに<code>User.count</code>は<code>100</code>。<br/>
さっきの比較コードを実行してみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Warming</span> <span class="n">up</span> <span class="o">--------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>   <span class="mi">253</span><span class="o">.</span><span class="mo">000</span>  <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                <span class="no">Yajl</span>   <span class="mi">259</span><span class="o">.</span><span class="mo">000</span>  <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                  <span class="no">Oj</span>   <span class="mi">387</span><span class="o">.</span><span class="mo">000</span>  <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'><span class="no">Calculating</span> <span class="o">-------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>      <span class="mi">2</span><span class="o">.</span><span class="mi">529</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="sx">%) i/s -     12.650k in   5.007160s</span>
</span><span class='line'><span class="sx">                Yajl      2.612k (± 2.6%)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>     <span class="mi">13</span><span class="o">.</span><span class="mi">209</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mo">061015</span><span class="n">s</span>
</span><span class='line'>                  <span class="no">Oj</span>      <span class="mi">3</span><span class="o">.</span><span class="mi">952</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">6</span><span class="o">%</span><span class="p">)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>     <span class="mi">20</span><span class="o">.</span><span class="mi">124</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mi">098328</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Comparison</span><span class="p">:</span>
</span><span class='line'>                  <span class="ss">Oj</span><span class="p">:</span>     <span class="mi">3952</span><span class="o">.</span><span class="mi">4</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'>                <span class="ss">Yajl</span><span class="p">:</span>     <span class="mi">2611</span><span class="o">.</span><span class="mi">7</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">51</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">:</span>     <span class="mi">2529</span><span class="o">.</span><span class="mi">5</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">56</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Benchmark::IPS::Report:0x007fdf594c4678</span>
</span><span class='line'> <span class="vi">@data</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@entries</span><span class="o">=</span>
</span><span class='line'>  <span class="o">[</span><span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdf5da291a0 @iterations=12650, @label=&quot;JSON.parse&quot;, @measurement_cycle=253, @microseconds=5007160.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdf5da29268 @error=87, @mean=2529.463823054468&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdf5a59b8c0 @iterations=13209, @label=&quot;Yajl&quot;, @measurement_cycle=259, @microseconds=5061015.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdf5a59ba28 @error=67, @mean=2611.693591724044&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdf5d821510 @iterations=20124, @label=&quot;Oj&quot;, @measurement_cycle=387, @microseconds=5098328.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdf5d821588 @error=141, @mean=3952.373849831794&gt;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>OJ</code>が<code>Yajl</code>、<code>JSON</code>より1.5倍速いことがわかる。</p>

<h3>まとめ</h3>

<p>単純に速度のパフォーマンス側をみると<code>OJ</code>を使った方が良さそう！</p>

<h2>追記</h2>

<h3>mastodonでのOJの使い方</h3>

<ul>
<li>emoji.jsonの変換</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/lib/emoji.rb</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">Oj</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;lib&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;emoji.json&#39;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>serviceクラスでのpayload作成</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/batched_remove_status_service.rb</span>
</span><span class='line'><span class="vi">@json_payloads</span> <span class="o">=</span> <span class="n">statuses</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_h</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/services/fan_out_on_write_service.rb</span>
</span><span class='line'><span class="vi">@payload</span> <span class="o">=</span> <span class="no">InlineRenderer</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">:status</span><span class="p">)</span>
</span><span class='line'><span class="vi">@payload</span> <span class="o">=</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="vi">@payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/services/notify_service.rb</span>
</span><span class='line'><span class="no">Redis</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&quot;timeline:</span><span class="si">#{</span><span class="vi">@recipient</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:notification</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="no">InlineRenderer</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="vi">@notification</span><span class="p">,</span> <span class="vi">@recipient</span><span class="p">,</span> <span class="ss">:notification</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/services/remove_status_service.rb</span>
</span><span class='line'><span class="vi">@payload</span> <span class="o">=</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="n">status</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>reactコンポーネントへのprops</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">// app/views/home/index.html.haml</span>
</span><span class='line'><span class="nc">.app-holder</span><span class="nf">#mastodon</span><span class="p">{</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">props</span><span class="p">:</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">default_props</span><span class="p">)</span> <span class="p">}</span> }
</span><span class='line'>
</span><span class='line'><span class="c">// app/views/about/show.html.haml</span>
</span><span class='line'><span class="nf">#mastodon-timeline</span><span class="p">{</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">props</span><span class="p">:</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">default_props</span><span class="p">)</span> <span class="p">}</span> }
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://blog.toshimaru.net/json-parser-benchmark/">RubyのJSONパーサーのパース速度比較</a><br/>
<a href="https://github.com/ohler55/oj">OJ Github</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Doorkeeper Gemについて]]></title>
    <link href="http://jq-jo.github.io/blog/2017/09/21/doorkeeper/"/>
    <updated>2017-09-21T10:33:42+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/09/21/doorkeeper</id>
    <content type="html"><![CDATA[<h3>Doorkeeperとは</h3>

<p>OAuth2による認証機能をアプリに追加するGemです。</p>

<h3>インストール</h3>

<ul>
<li>Gem</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;doorkeeper&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>db migration</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">install</span>
</span><span class='line'><span class="n">rails</span> <span class="n">generate</span> <span class="ss">doorkeeper</span><span class="p">:</span><span class="n">migration</span>
</span><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">db</span><span class="p">:</span><span class="n">migrate</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、自動に<code>routes.rb</code>に<code>use_doorkeeper</code>が追加される。それから以下のルートが生成される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GET</span>  <span class="sr">/oauth/</span><span class="n">authorize</span><span class="o">/</span><span class="ss">:code</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">authorize</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">DELETE</span>    <span class="sr">/oauth/</span><span class="n">authorize</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">POST</span>  <span class="sr">/oauth/</span><span class="n">authorize</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">POST</span>  <span class="sr">/oauth/</span><span class="n">token</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">POST</span>  <span class="sr">/oauth/</span><span class="n">revoke</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">applications</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">POST</span>  <span class="sr">/oauth/</span><span class="n">applications</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">applications</span><span class="o">/</span><span class="kp">new</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">applications</span><span class="o">/</span><span class="ss">:id</span><span class="o">/</span><span class="n">edit</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">applications</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">PATCH</span> <span class="sr">/oauth/</span><span class="n">applications</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">PUT</span>   <span class="sr">/oauth/</span><span class="n">applications</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">DELETE</span>    <span class="sr">/oauth/</span><span class="n">applications</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">authorized_applications</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">DELETE</span>    <span class="sr">/oauth/</span><span class="n">authorized_applications</span><span class="o">/</span><span class="ss">:id</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span><span class='line'><span class="no">GET</span>   <span class="sr">/oauth/</span><span class="n">token</span><span class="o">/</span><span class="n">info</span><span class="p">(</span><span class="o">.</span><span class="ss">:format</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このルートを利用してアプリケーション毎認証を作ってアクセストークンなどを出したりするのもできる。</p>

<h3>使い方</h3>

<p><code>POST   /oauth/authorize</code>で取得できる<code>code</code>を利用して<code>POST   /oauth/token</code>でアクセストークンを取得。</p>

<h4>例</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">F</span> <span class="n">response_type</span><span class="o">=</span><span class="n">code</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">F</span> <span class="n">grant_type</span><span class="o">=</span><span class="n">authorization_code</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">F</span> <span class="n">client_id</span><span class="o">=</span><span class="mi">9</span><span class="n">b36d8c0db59eff5038aea7a417d73e69aea75b41aac771816d2ef1b3109cc2f</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">F</span> <span class="n">client_secret</span><span class="o">=</span><span class="n">d6ea27703957b69939b8104ed4524595e210cd2e79af587744a7eb6e58f5b3d2</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">F</span> <span class="n">code</span><span class="o">=</span><span class="mi">456</span><span class="n">b683f8c1e5ccde47bdfac47ee3ec96e0f1bec2546734b92980dcb806df207</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">F</span> <span class="n">redirect_uri</span><span class="o">=</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">F</span> <span class="n">resource_owner_id</span><span class="o">=</span><span class="mi">1</span> <span class="p">\</span>
</span><span class='line'><span class="o">-</span><span class="n">X</span> <span class="no">POST</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="ss">localhost</span><span class="p">:</span><span class="mi">3000</span><span class="o">/</span><span class="n">oauth</span><span class="o">/</span><span class="n">token</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>parameter

<ul>
<li>grant_type

<ul>
<li><code>initializers/doorkeeper.rb</code>に設定した<code>grant_flows</code></li>
</ul>
</li>
<li>client_id

<ul>
<li>doorkeeperで作ったアプリの<code>Application Id</code></li>
</ul>
</li>
<li>client_secret

<ul>
<li>doorkeeperで作ったアプリの<code>Secret</code></li>
</ul>
</li>
<li>code

<ul>
<li>取得したコード</li>
</ul>
</li>
<li>redirect_uri

<ul>
<li>doorkeeperで作ったアプリの<code>Callback urls</code></li>
</ul>
</li>
<li>resource_owner_id

<ul>
<li><code>initializers/doorkeeper.rb</code>に設定した<code>resource_owner_authenticator</code></li>
</ul>
</li>
</ul>
</li>
<li>結果</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;access_token&quot;</span><span class="ss">:&quot;51ebde838061a87f4b2ea318386387f6d265a7328b3edfacb4b7deee7c3bfa73&quot;</span><span class="p">,</span><span class="s2">&quot;token_type&quot;</span><span class="ss">:&quot;bearer&quot;</span><span class="p">,</span><span class="s2">&quot;created_at&quot;</span><span class="p">:</span><span class="mi">1481614521</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうにアクセストークンが取得できる。</p>

<h4>その他</h4>

<p>場合によって<code>curl</code>じゃなくて他のライブラリを使うこともできる。</p>

<ul>
<li>Oauth2</li>
</ul>


<p>Oauth2 gemをインストールする。それから</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">OAuth2</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">CLIENT_ID</span><span class="p">,</span> <span class="no">CLIENT_SECRET</span><span class="p">,</span> <span class="ss">site</span><span class="p">:</span> <span class="no">SITE_URL</span><span class="p">)</span>
</span><span class='line'><span class="n">token</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">auth_code</span><span class="o">.</span><span class="n">get_token</span><span class="p">(</span><span class="no">CODE</span><span class="p">,</span> <span class="ss">:redirect_uri</span> <span class="o">=&gt;</span> <span class="no">REDIRECT_URL</span><span class="p">,</span> <span class="ss">:grant_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;client_credentials&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とすると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;OAuth2::AccessToken:0x007fe8cfa51f58</span>
</span><span class='line'> <span class="vi">@client</span><span class="o">=</span>
</span><span class='line'>  <span class="c1">#&lt;OAuth2::Client:0x007fe8cea45330</span>
</span><span class='line'>   <span class="vi">@auth_code</span><span class="o">=</span><span class="c1">#&lt;OAuth2::Strategy::AuthCode:0x007fe8cc25b3d8 @client=#&lt;OAuth2::Client:0x007fe8cea45330 ...&gt;&gt;,</span>
</span><span class='line'>   <span class="vi">@connection</span><span class="o">=</span>
</span><span class='line'>    <span class="c1">#&lt;Faraday::Connection:0x007fe8cc25a5c8</span>
</span><span class='line'>     <span class="vi">@builder</span><span class="o">=</span>
</span><span class='line'>      <span class="c1">#&lt;Faraday::RackBuilder:0x007fe8cc2593a8</span>
</span><span class='line'>       <span class="vi">@app</span><span class="o">=</span>
</span><span class='line'>        <span class="c1">#&lt;Faraday::Request::UrlEncoded:0x007fe8cecb7140</span>
</span><span class='line'>         <span class="vi">@app</span><span class="o">=</span><span class="c1">#&lt;Faraday::Adapter::NetHttp:0x007fe8cecb7208 @app=#&lt;Proc:0x007fe8cecb73e8@/Users/jo/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/faraday-0.12.2/lib/faraday/rack_builder.rb:154 (lambda)&gt;, @config_block=nil, @connection_options={}&gt;&gt;,</span>
</span><span class='line'>       <span class="vi">@handlers</span><span class="o">=[</span><span class="no">Faraday</span><span class="o">::</span><span class="no">Request</span><span class="o">::</span><span class="no">UrlEncoded</span><span class="p">,</span> <span class="no">Faraday</span><span class="o">::</span><span class="no">Adapter</span><span class="o">::</span><span class="no">NetHttp</span><span class="o">]&gt;</span><span class="p">,</span>
</span><span class='line'>     <span class="vi">@default_parallel_manager</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>     <span class="vi">@headers</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;User-Agent&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Faraday v0.12.2&quot;</span><span class="p">},</span>
</span><span class='line'>     <span class="vi">@options</span><span class="o">=</span><span class="c1">#&lt;struct Faraday::RequestOptions params_encoder=nil, proxy=nil, bind=nil, timeout=nil, open_timeout=nil, boundary=nil, oauth=nil, context=nil&gt;,</span>
</span><span class='line'>     <span class="vi">@parallel_manager</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>     <span class="vi">@params</span><span class="o">=</span><span class="p">{},</span>
</span><span class='line'>     <span class="vi">@proxy</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'>     <span class="vi">@ssl</span><span class="o">=</span><span class="c1">#&lt;struct Faraday::SSLOptions verify=nil, ca_file=nil, ca_path=nil, verify_mode=nil, cert_store=nil, client_cert=nil, client_key=nil, certificate=nil, private_key=nil, verify_depth=nil, version=nil&gt;,</span>
</span><span class='line'>     <span class="vi">@url_prefix</span><span class="o">=</span><span class="c1">#&lt;URI::HTTP http://localhost:3000/home/access_token&gt;&gt;,</span>
</span><span class='line'>   <span class="vi">@id</span><span class="o">=</span><span class="s2">&quot;c4af4d3ab6de658d55e9f0383cfec3703586f5802be991c82f3df99bc80ea853&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="vi">@options</span><span class="o">=</span><span class="p">{</span><span class="ss">:authorize_url</span><span class="o">=&gt;</span><span class="s2">&quot;/oauth/authorize&quot;</span><span class="p">,</span> <span class="ss">:token_url</span><span class="o">=&gt;</span><span class="s2">&quot;/oauth/token&quot;</span><span class="p">,</span> <span class="ss">:token_method</span><span class="o">=&gt;</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">:auth_scheme</span><span class="o">=&gt;</span><span class="ss">:request_body</span><span class="p">,</span> <span class="ss">:connection_opts</span><span class="o">=&gt;</span><span class="p">{},</span> <span class="ss">:connection_build</span><span class="o">=&gt;</span><span class="kp">nil</span><span class="p">,</span> <span class="ss">:max_redirects</span><span class="o">=&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="ss">:raise_errors</span><span class="o">=&gt;</span><span class="kp">true</span><span class="p">},</span>
</span><span class='line'>   <span class="vi">@secret</span><span class="o">=</span><span class="s2">&quot;928d7220f1f112cf954871da5559a54a64eabcec9b56ffa87ad43a11a678b548&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="vi">@site</span><span class="o">=</span><span class="s2">&quot;http://localhost:3000/home/access_token&quot;</span><span class="o">&gt;</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@expires_at</span><span class="o">=</span><span class="mi">1506062175</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@expires_in</span><span class="o">=</span><span class="mi">7200</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@options</span><span class="o">=</span><span class="p">{</span><span class="ss">:mode</span><span class="o">=&gt;</span><span class="ss">:header</span><span class="p">,</span> <span class="ss">:header_format</span><span class="o">=&gt;</span><span class="s2">&quot;Bearer %s&quot;</span><span class="p">,</span> <span class="ss">:param_name</span><span class="o">=&gt;</span><span class="s2">&quot;access_token&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="vi">@params</span><span class="o">=</span><span class="p">{</span><span class="s2">&quot;token_type&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;bearer&quot;</span><span class="p">,</span> <span class="s2">&quot;created_at&quot;</span><span class="o">=&gt;</span><span class="mi">1506054975</span><span class="p">},</span>
</span><span class='line'> <span class="vi">@refresh_token</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@token</span><span class="o">=</span><span class="s2">&quot;c7f79becd53a4f4e571b95dc9e075d39034f9e613505fdb844bd8e778eb8933c&quot;</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうresponseを取得できる。</p>

<ul>
<li>RestClient</li>
</ul>


<p>RestClient gemをインストールし、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">RestClient</span><span class="o">.</span><span class="n">post</span> <span class="s1">&#39;http://localhost:3000/oauth/token&#39;</span><span class="p">,</span> <span class="p">{</span><span class="ss">grant_type</span><span class="p">:</span> <span class="s1">&#39;client_credentials&#39;</span><span class="p">,</span> <span class="ss">client_id</span><span class="p">:</span> <span class="no">CLIENT_ID</span><span class="p">,</span> <span class="ss">client_secret</span><span class="p">:</span> <span class="no">CLIENT_SECRET</span><span class="p">}</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">body</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;{</span><span class="se">\&quot;</span><span class="s2">access_token</span><span class="se">\&quot;</span><span class="s2">:</span><span class="se">\&quot;</span><span class="s2">7328d931953ce2a4db130d02575a95a80b47683c2b2f9619492285465bce4b9d</span><span class="se">\&quot;</span><span class="s2">,</span><span class="se">\&quot;</span><span class="s2">token_type</span><span class="se">\&quot;</span><span class="s2">:</span><span class="se">\&quot;</span><span class="s2">bearer</span><span class="se">\&quot;</span><span class="s2">,</span><span class="se">\&quot;</span><span class="s2">expires_in</span><span class="se">\&quot;</span><span class="s2">:7200,</span><span class="se">\&quot;</span><span class="s2">created_at</span><span class="se">\&quot;</span><span class="s2">:1506055209}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>というresponseを取得できる。</p>

<h3>Api連携</h3>

<p><code>before_action :doorkeeper_authorize!</code>を使って有効TokenのみアクセスできるようにApiと連携ができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">BaseController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:doorkeeper_authorize!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに設定をしておく。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">UsersController</span> <span class="o">&lt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">BaseController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">user</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="n">user</span><span class="p">}</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="s2">&quot;cannot found this user&quot;</span><span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ユーザー情報を取得するapiを試してみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="no">OAuth2</span><span class="o">::</span><span class="no">Client</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;c4af4d3ab6de658d55e9f0383cfec3703586f5802be991c82f3df99bc80ea853&quot;</span><span class="p">,</span> <span class="s2">&quot;928d7220f1f112cf954871da5559a54a64eabcec9b56ffa87ad43a11a678b548&quot;</span><span class="p">,</span> <span class="ss">site</span><span class="p">:</span> <span class="s2">&quot;http://localhost:3000&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">token</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">auth_code</span><span class="o">.</span><span class="n">get_token</span><span class="p">(</span><span class="s2">&quot;536b065b6ae6ca9acdc71d33387b4e5e6dbdd5bcc6950f7fcb2e96fd307bc295&quot;</span><span class="p">,</span> <span class="ss">:redirect_uri</span> <span class="o">=&gt;</span> <span class="s2">&quot;http://localhost:3000/home/access_token&quot;</span><span class="p">,</span> <span class="ss">:grant_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;client_credentials&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">user_info</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;/api/users/1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">JSON</span><span class="o">.</span><span class="n">decode</span> <span class="n">user_info</span><span class="o">.</span><span class="n">body</span>
</span><span class='line'><span class="n">user_email</span> <span class="o">=</span> <span class="n">body</span><span class="o">[</span><span class="s2">&quot;user&quot;</span><span class="o">][</span><span class="s2">&quot;email&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;user@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>簡単にデータが取れる。<br/>
トークン無しでアクセスしようとしたら、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RestClient</span><span class="o">.</span><span class="n">get</span> <span class="s1">&#39;http://localhost:3000/api/users/1&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">RestClient</span><span class="o">::</span><span class="ss">Unauthorized</span><span class="p">:</span> <span class="mi">401</span> <span class="no">Unauthorized</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに接続できない。</p>

<p>Doorkeeper gemはすごく簡単にOAuth2による認証機能を実装できる。Doorkeeperと連携してさらにApiを作ったり、ログイン機能に認証機能をつけるなどの実装も可能になる。</p>

<h2>参考</h2>

<p><a href="https://github.com/doorkeeper-gem/doorkeeper">doorkeeper</a><br/>
<a href="http://qiita.com/cyborg__ninja/items/a5e0a12590a1b921a31b">Doorkeeper gem でOauth認証できるアプリケーションを作った後の事</a><br/>
<a href="http://kansiho.hatenablog.com/entry/2017/09/02/%E3%80%90Rails5%E3%80%91Doorkeeper_gem%E3%81%A7OAuth2.0%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEAPI%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%80%81%E3%83%86%E3%82%B9%E3%83%88%E3%81%99%E3%82%8B%E6%B5%81%E3%82%8C">【Rails5】Doorkeeper gemでOAuth2.0のためのAPIを作って、rubyクライアントで呼び出す</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shrine Gemについて]]></title>
    <link href="http://jq-jo.github.io/blog/2017/08/29/shrine/"/>
    <updated>2017-08-29T14:34:13+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/08/29/shrine</id>
    <content type="html"><![CDATA[<ul>
<li>shrineとは</li>
</ul>


<p>公式サイトには</p>

<blockquote><p>Shrine is a toolkit for file attachments in Ruby applications.</p></blockquote>

<p>と書いてある。つまり、ShrineはRubyアプリケーションにおいてファイルをアタッチするために使えるツールキットである。</p>

<ul>
<li>使い方

<ul>
<li>gemのインストール</li>
</ul>


<pre><code class="``ruby">  gem 'shrine'
</code></pre>

<ul>
<li>初期設定</li>
</ul>


<pre><code class="``ruby">  # config/initializers/shrine.rb
  require "shrine"
  require "shrine/storage/file_system"

  Shrine.storages = {
    cache: Shrine::Storage::FileSystem.new("public", prefix: "uploads/cache"), # temporary
    store: Shrine::Storage::FileSystem.new("public", prefix: "uploads/store"), # permanent
  }

  Shrine.plugin :activerecord
  Shrine.plugin :cached_attachment_data # for forms
</code></pre>

<ul>
<li>Model</li>
</ul>


<pre><code class="``ruby">  class Photo &lt; ApplicationRecord
    include ImageUploader[:image]
  end
</code></pre>

<ul>
<li>Uploader</li>
</ul>


<pre><code class="``ruby">  class ImageUploader &lt; Shrine
  end
</code></pre>

<ul>
<li>Controller<br/>
Controllerのparamは<code>image_data</code>ではなく、<code>image</code>にする。</li>
</ul>


<pre><code class="``ruby">  def photo_params
    params.require(:photo).permit(:name, :image)
  end
</code></pre></li>
</ul>


<p>ビューを作ってブラウザーで確認してみると、</p>

<p><img src="https://monosnap.com/file/0qOCToywihGzpmIutHR2OjDjG2Q03w.png" alt="" /><br/>
大きすぎる。。！！</p>

<ul>
<li><p>リサイズ<br/>
リサイズのためには他のgemをインストールする必要がある。</p>

<ul>
<li>gemのインストール</li>
</ul>


<pre><code class="``ruby">  gem 'image_processing'
  gem 'mini_magick', '&gt;= 4.3.5'
</code></pre>

<ul>
<li>Uploader編集</li>
</ul>


<pre><code class="``ruby">  require 'image_processing/mini_magick'
  class ImageUploader &lt; Shrine
    include ImageProcessing::MiniMagick
    plugin :processing
    plugin :versions   # enable Shrine to handle a hash of files
    plugin :delete_raw # delete processed files after uploading

    process(:store) do |io, context|
      original = io.download

      size_800 = resize_to_limit!(original, 800, 800) { |cmd| cmd.auto_orient } # orient rotated images
      size_500 = resize_to_limit(size_800,  500, 500)
      size_300 = resize_to_limit(size_500,  300, 300)

      {original: io, large: size_800, medium: size_500, small: size_300}
    end
  end
</code></pre>

<ul>
<li>ビューで表示する
ビューでサイズ別の画像を取得できる。</li>
</ul>


<pre><code class="``">  = image_tag, @photo.image[:original].url
  = image_tag, @photo.image[:large].url}
  = image_tag, @photo.image[:medium].url}"
  = image_tag, @photo.image[:small].url}"
</code></pre>

<p>  ビューで確認すると、</p>

<p>  <img src="https://monosnap.com/file/HdW4JQ8J5DJTn3vCV8QvvKQQR0HiIF.png" alt="" /></p></li>
<li><p>バリデーションの追加<br/>
Uploadにバリデーションをかけるのももちろんできる。<br/>
<code>validation_helpers</code>のプラグインを追加し、バリデーションを追加する。<br/>
バリデーションの処理は<code>Attacher.validate</code>の中に記述する。</p>

<ul>
<li>Uploaderの編集</li>
</ul>


<pre><code class="``ruby">  require 'image_processing/mini_magick'
  class ImageUploader &lt; Shrine
    include ImageProcessing::MiniMagick
    plugin :processing
    plugin :versions   # enable Shrine to handle a hash of files
    plugin :delete_raw # delete processed files after uploading
    plugin :validation_helpers

    process(:store) do |io, context|
      original = io.download

      size_800 = resize_to_limit!(original, 800, 800) { |cmd| cmd.auto_orient } # orient rotated images
      size_500 = resize_to_limit(size_800,  500, 500)
      size_300 = resize_to_limit(size_500,  300, 300)

      {original: io, large: size_800, medium: size_500, small: size_300}
    end

    Attacher.validate do
      validate_max_size 5 * 1024 * 1024, message: 'Image is too large (max is 5 MB)'
      validate_mime_type_inclusion %w(image/jpeg image/jpg image/png)
    end
  end
</code></pre>

<p>  バリデーションにかかったら</p>

<pre><code class="``">  photo = Photo.new
  photo.image = File.open("img.png")
  photo.valid? #=&gt; false
  photo.errors.to_hash #=&gt; {image: ["Image is too large (max is 5 MB)"]}
</code></pre></li>
<li>Direct uploads

<ul>
<li>gemのインストール</li>
</ul>


<pre><code class="``">  gem 'aws-sdk', '~&gt; 2.1'
  gem 'roda'
</code></pre>

<ul>
<li>config/initializers/shrine.rbファイルの編集</li>
</ul>


<pre><code class="``ruby">  require "shrine/storage/s3"

  s3_options = {
    access_key_id:     "abc",
    secret_access_key: "123",
    region:            "my-region",
    bucket:            "my-bucket",
  }

  Shrine.storages = {
    cache: Shrine::Storage::S3.new(prefix: "cache", **s3_options),
    store: Shrine::Storage::S3.new(prefix: "store", **s3_options),
  }
</code></pre>

<ul>
<li>Uploaderにpluginの追加</li>
</ul>


<pre><code class="``ruby">  plugin :direct_upload
</code></pre>

<ul>
<li>routes.rbに<code>mount</code>追加</li>
</ul>


<pre><code class="``ruby">  Rails.application.routes.draw do
    mount ImageUploader::UploadEndpoint =&gt; "/images"
  end
</code></pre>

<ul>
<li>jsonの取得</li>
</ul>


<p>  <code>GET /images/cache/presign</code>のrouteでjsonを取得できる。</p>

<pre><code class="``">  # GET /images/cache/presign
  {
    "url" =&gt; "https://my-bucket.s3-eu-west-1.amazonaws.com",
    "fields" =&gt; {
      "key" =&gt; "cache/b7d575850ba61b44c8a9ff889dfdb14d88cdc25f8dd121004c8",
      "policy" =&gt; "eyJleHBpcmF0aW9uIjoiMjAxNS0QwMToxMToyOVoiLCJjb25kaXRpb25zIjpbeyJidWNrZXQiOiJzaHJpbmUtdGVzdGluZyJ9LHsia2V5IjoiYjdkNTc1ODUwYmE2MWI0NGU3Y2M4YTliZmY4OGU5ZGZkYjE2NTQ0ZDk4OGNkYzI1ZjhkZDEyMTAwNGM4In0seyJ4LWFtei1jcmVkZW50aWFsIjoiQUtJQUlKRjU1VE1aWlk0NVVUNlEvMjAxNTEwMjQvZXUtd2VzdC0xL3MzL2F3czRfcmVxdWVzdCJ9LHsieC1hbXotYWxnb3JpdGhtIjoiQVdTNC1ITUFDLVNIQTI1NiJ9LHsieC1hbXotZGF0ZSI6IjIwMTUxMDI0VDAwMTEyOVoifV19",
      "x-amz-credential" =&gt; "AKIAIJF55TMZYT6Q/20151024/eu-west-1/s3/aws4_request",
      "x-amz-algorithm" =&gt; "AWS4-HMAC-SHA256",
      "x-amz-date" =&gt; "20151024T001129Z",
      "x-amz-signature" =&gt; "c1eb634f83f96b69bd675f535b3ff15ae184b102fcba51e4db5f4959b4ae26f4"
    }
  }
</code></pre></li>
</ul>


<p>こう設定すると、ひとまずs3にdirect_uploadはできる。<br/>
公式documentには<code>jQuery-File-Upload</code>, <code>Dropzone</code>, <code>FineUploader</code>などのJavaScriptファイルアップロードライブラリとも連携もできると書いてあるので、次は今のプロジェクトで使用している<code>Dropzone</code>との連携を調べてみる。</p>

<h2>参照</h2>

<p><a href="https://github.com/janko-m/shrine">Shrine githubページ</a><br/>
<a href="http://qiita.com/okuramasafumi/items/488b535ad8889ef22b72">RailsでShrineを使ってファイルをS3にダイレクトアップロードするときの注意点</a><br/>
<a href="https://re-engines.com/2017/04/21/shrine%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E7%94%BB%E5%83%8F%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B/">Shrineを使って画像をアップロードする</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveModelSerializersについて]]></title>
    <link href="http://jq-jo.github.io/blog/2017/08/17/active-model-serializers/"/>
    <updated>2017-08-17T10:43:55+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/08/17/active-model-serializers</id>
    <content type="html"><![CDATA[<p>Mastodonのソースコードを最近のRailsの記述を学ぼうとしたのでMastodonのソースコードを読み始めた。<br/>
Mastodonのrootページになる<code>/about</code>からみたのだが、最初からわからないことばかり！（泣）<br/>
Mastodonには<code>ActiveModelSerializers</code>を使ってjsonの処理を行っていたので<code>ActiveModelSerializers</code>を調べてみた。</p>

<h3>ActiveModelSerializersとは</h3>

<p><a href="https://github.com/rails-api/active_model_serializers/tree/0-10-stable">ActiveModelSerializers</a>によると</p>

<blockquote><p>ActiveModelSerializers brings convention over configuration to your JSON generation.</p></blockquote>

<p>と書いてある。
つまりActiveModelSerializersとはRailsで簡単で素早くjsonを作れるgemである。
JSON形式でレスポンスを返す場合、表示するパラメータを制御したいときに細かなJSONの制御を行うことができるので便利。</p>

<h3>使い方</h3>

<p><code>rails generate serializer Hoge</code>を実行すると<br/>
<code>app/serializers/hoge_serializer.rb</code>ファイルが作成される。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">HogeSerializer</span> <span class="o">&lt;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:name_size</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name_size</span>
</span><span class='line'>    <span class="n">object</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードをみてみると<br/>
- <code>attributes</code>にレスポンスで表示したいパラメータを記述する。
- 関連オブジェクトで同時に表示したいオブジェクトがある場合は<code>has_many</code>や<code>has_one</code>などが使える。
- 関数を定義することで、独自のパラメータを追加することもできる。</p>

<p>Controllerで次のように書くと、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@hoge</span> <span class="o">=</span> <span class="no">Hoge</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@hoge</span>
</span></code></pre></td></tr></table></div></figure>


<p>結果のjsonが以下のようになっている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nb">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;hoge&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">email</span><span class="p">:</span> <span class="s1">&#39;hoge@example.com&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">name_size</span><span class="p">:</span> <span class="mi">4</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように、Serializerクラスで整形処理を行うことで、Controllerがより綺麗になると思う。</p>

<h2>参照</h2>

<p><a href="http://qiita.com/m_nakamura145/items/75fd7c0934daf9bcc21d">active_model_serializersが便利</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MastodonをHerokuで動かしてみる]]></title>
    <link href="http://jq-jo.github.io/blog/2017/08/02/mastodon/"/>
    <updated>2017-08-02T19:26:59+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/08/02/mastodon</id>
    <content type="html"><![CDATA[<h3>Mastodonとは</h3>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%B9%E3%83%88%E3%83%89%E3%83%B3_(%E3%83%9F%E3%83%8B%E3%83%96%E3%83%AD%E3%82%B0">(ウィキペディア「マストドン (ミニブログ)」)</a>)に詳しく説明されているが<code>Mastodon</code>というものは<code>Twitter</code>によく似ている短文投稿型のSNSである。最近流行っているそうだ。Mastodonはオープンソースで公開されているので自由に活用できる。</p>

<h3>使い方</h3>

<p>使い方としてはいろいろあるけど、今回はgithubに乗せている<code>Deploy to Heroku</code>ボタンを利用する方法と<code>git clone</code>して自ら<code>Heroku</code>にpushする方法、２つを試してみる。</p>

<h4><code>Deploy to Heroku</code>ボタンを利用する方法</h4>

<p>以外とすごく簡単。<a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Heroku-guide.md">https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Heroku-guide.md</a> のHeroku Buttonを押し、</p>

<ul>
<li>App Nameを希望のアプリ名に</li>
<li>S3_ENABLEDをtrueに</li>
<li>LOCAL_DOMAINを&lt;アプリ名>.herokuapp.comに</li>
<li>SMTP_FROM_ADDRESSをnotifications@localhostに</li>
</ul>


<p>変更して、Deployボタンを押す。Mastodonはデフォルトではdynoのファイルシステムにアイコンやメディアなどのファイルを格納する。これらのファイルは1日に1度のdynoの再起動の際に消えてしまう。なのでS3を使ってファイルを保存する方が良い。S3を使う場合は</p>

<ul>
<li>S3_BUCKET</li>
<li>S3_REGION</li>
<li>AWS_ACCESS_KEY_ID</li>
<li>AWS_SECRET_ACCESS_KEY</li>
</ul>


<p>これらを記入する。<br/>
メールの機能のためにSMTP設定もしなきゃいけないが今回は一旦<code>gmail</code>で設定しておいた。<br/>
Manage appボタンからダッシュボードを開き、Dyno formationからConfigure Dynosをたどり、worker dynoをONにする。<br/>
これでセッティングは終わり。<br/>
今までの設定をした<code>Application</code>は<a href="https://mastojon.herokuapp.com">ここ</a>で確認できる。</p>

<h4>git clone</h4>

<p><code>git clone</code>するのもすぐできる。<br/>
適当なDirectoryに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone git@github.com:tootsuite/mastodon.git</span></code></pre></td></tr></table></div></figure>


<p>を入力する。それから<br/>
- Xcode Command Line ツール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ xcode-select --install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>HomeBrewで下記のものをインストール</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install imagemagick ffmpeg yarn postgresql redis rbenv nodejs protobuf</span></code></pre></td></tr></table></div></figure>


<ul>
<li>rbenv 2.4.1をインストール</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv install 2.4.1</span></code></pre></td></tr></table></div></figure>


<ul>
<li>bundlerインストール</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install bundler</span></code></pre></td></tr></table></div></figure>


<p>全部インストールできたら、実際のapplicationのためのインストールをする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install libidn
</span><span class='line'>$ bundle install --with development
</span><span class='line'>$ yarn install --pure-lockfile
</span><span class='line'>$ gem install foreman --no-ri --no-rdoc
</span><span class='line'>$ bundle exec rails db:setup
</span><span class='line'>$ bin/rails assets:precompile</span></code></pre></td></tr></table></div></figure>


<p>ここまでしたらセッティングは終わり。こうしたらローカルで動くようになる。<br/>
そこで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku login
</span><span class='line'>$ heroku create &lt;App名&gt;</span></code></pre></td></tr></table></div></figure>


<p>を実行してheroku appを作って、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "first commit"
</span><span class='line'>$ git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>を実行してpushする。そしたら</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>remote:        To see why this extension failed to compile, please check the mkmf.log which can
</span><span class='line'>remote:        be found here:
</span><span class='line'>remote:        
</span><span class='line'>remote:        /tmp/build_65348a656aac448eb5aea36afa80f6c0/vendor/bundle/ruby/2.4.0/extensions/x86_64-linux/2.4.0/cld3-3.1.3/mkmf.log
</span><span class='line'>remote:        
</span><span class='line'>remote:        extconf failed, exit code 1
</span><span class='line'>remote:        
</span><span class='line'>remote:        Gem files will remain installed in
</span><span class='line'>remote:        /tmp/build_65348a656aac448eb5aea36afa80f6c0/vendor/bundle/ruby/2.4.0/gems/cld3-3.1.3
</span><span class='line'>remote:        for inspection.
</span><span class='line'>remote:        Results logged to
</span><span class='line'>remote:        /tmp/build_65348a656aac448eb5aea36afa80f6c0/vendor/bundle/ruby/2.4.0/extensions/x86_64-linux/2.4.0/cld3-3.1.3/gem_make.out
</span><span class='line'>remote:        
</span><span class='line'>remote:        An error occurred while installing cld3 (3.1.3), and Bundler cannot continue.
</span><span class='line'>remote:        Make sure that `gem install cld3 -v '3.1.3'` succeeds before bundling.
</span><span class='line'>remote:        
</span><span class='line'>remote:        In Gemfile:
</span><span class='line'>remote:        cld3
</span><span class='line'>remote:  !
</span><span class='line'>remote:  !     Failed to install gems via Bundler.
</span><span class='line'>remote:  !
</span><span class='line'>remote:  !     Push rejected, failed to compile Ruby app.
</span><span class='line'>remote:
</span><span class='line'>remote:  !     Push failed</span></code></pre></td></tr></table></div></figure>


<p>と怒られる。調べてみると<code>buildpacks</code>を設置しなきゃいけない。それで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku buildpacks:add https://github.com/heroku/heroku-buildpack-apt # v1.3.3かそれ以前ではこの行は不要
</span><span class='line'>$ heroku buildpacks:add heroku/nodejs -a &lt;App名&gt;
</span><span class='line'>$ heroku buildpacks:add heroku/ruby -a &lt;App名&gt;
</span><span class='line'>$ heroku addons:create heroku-postgresql -a &lt;App名&gt;
</span><span class='line'>$ heroku addons:create heroku-redis -a &lt;App名&gt;</span></code></pre></td></tr></table></div></figure>


<p>ちゃんと設置をしてから</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push heroku master</span></code></pre></td></tr></table></div></figure>


<p>をしてみたら、無事に通る。次は</p>

<ul>
<li>データベースのマイグレーション</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku run rails db:migrate -a &lt;App名&gt;
</span><span class='line'>$ heroku run rails db:seed -a &lt;App名&gt;</span></code></pre></td></tr></table></div></figure>


<ul>
<li>アプリケーションの設定</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config:set HEROKU=true -a &lt;App名&gt;
</span><span class='line'>$ heroku config:set LOCAL_DOMAIN=$APP_NAME.herokuapp.com -a &lt;App名&gt;
</span><span class='line'>$ heroku config:set PAPERCLIP_SECRET=`heroku run rails secret -a &lt;App名&gt;` -a &lt;App名&gt;
</span><span class='line'>$ heroku config:set SECRET_KEY_BASE=`heroku run rails secret -a &lt;App名&gt;` -a &lt;App名&gt;
</span><span class='line'>$ heroku config:set OTP_SECRET=`heroku run rails secret -a &lt;App名&gt;` -a &lt;App名&gt;</span></code></pre></td></tr></table></div></figure>


<p>そしてHerokuのAppのDashboardでworkerをONにする。<br/>
ここまでするとセットアップは全て終わり、Heroku上で動かすことができる。その結果は<a href="https://jastodon.herokuapp.com">ここ</a>で確認できる。</p>

<h2>参照</h2>

<p><a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Development-guide.md">tootsuite/documentation(Development guide)</a><br/>
<a href="https://github.com/tootsuite/documentation/blob/master/Running-Mastodon/Heroku-guide.md">tootsuite/documentation(Heroku guide)</a><br/>
<a href="https://github.com/zunda/mastodon/wiki/CreateInstanceOnHeroku#heroku-cli%E3%82%92%E4%BD%BF%E3%81%86">zunda/mastodon(CreateInstanceOnHeroku)</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラス変数、インスタンス変数、クラスインスタス変数]]></title>
    <link href="http://jq-jo.github.io/blog/2017/07/26/class-instance-variable/"/>
    <updated>2017-07-26T19:02:16+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/07/26/class-instance-variable</id>
    <content type="html"><![CDATA[<h3>クラス変数</h3>

<p>クラスに変数を持ちたい時にはクラス変数を定義すれば良い。<code>@@</code>というプレフィックスをつけるとクラス変数の定義して使うことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ParentVariable</span>
</span><span class='line'>  <span class="vc">@@var</span> <span class="o">=</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class_var</span>
</span><span class='line'>    <span class="vc">@@var</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Variable</span> <span class="o">&lt;</span> <span class="no">ParentVariable</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>クラス変数はサブクラスや通常のインスタンスメソッドからアクセスすることもできる。上記の<code>Variable</code>クラスの<code>class_var</code>を実行してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span> <span class="o">=</span> <span class="no">Variable</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Variable:0x007f8483c8f730&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span><span class="o">.</span><span class="n">class_var</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通にクラス変数の<code>@@var</code>を取得できる。しかし、クラス変数には少し使いにくいところがある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ParentVariable</span>
</span><span class='line'>  <span class="vc">@@var</span> <span class="o">=</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">class_var</span>
</span><span class='line'>    <span class="vc">@@var</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Variable</span> <span class="o">&lt;</span> <span class="no">ParentVariable</span>
</span><span class='line'>  <span class="vc">@@var</span> <span class="o">=</span> <span class="s2">&quot;Good morning!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">parent_var</span> <span class="o">=</span> <span class="no">ParentVariable</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;ParentVariable:0x007f8480e4dd90&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">prent_var</span><span class="o">.</span><span class="n">class_var</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span> <span class="o">=</span> <span class="no">Variable</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Variable:0x007f8480de7388&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span><span class="o">.</span><span class="n">class_var</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Good morning!&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">pvar</span><span class="o">.</span><span class="n">class_var</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Good morning!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうにクラス変数を変更する場合、このクラス変数にかかっている全てのオブジェクトに影響を与えるので実際の変数の値が変更されてしまう。ということで多くのRubyistはクラス変数は使ってない（らしい）。</p>

<h3>インスタンス変数</h3>

<p>インスタンス変数は<code>@</code>というプレフィックスをつけて使う。これはオブジェクトに所属していて、クラスとは何もつながりがない。なので、同じクラスのオブジェクトでもインスタンス変数の値はそれぞれ違う。インスタンス変数は値を代入した時に初めて出現する。だから明示的に定義しなくても良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Variable</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instance_var</span> <span class="n">var</span>
</span><span class='line'>    <span class="vi">@var</span> <span class="o">=</span> <span class="s2">&quot;variable : &#39;</span><span class="si">#{</span><span class="n">var</span><span class="si">}</span><span class="s2">&#39;.&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span> <span class="o">=</span> <span class="no">Variable</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Variable:0x007f8483923e98&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var1</span> <span class="o">=</span> <span class="n">var</span><span class="o">.</span><span class="n">instance_var</span> <span class="s2">&quot;Hello&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;variable : &#39;Hello&#39;.&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var2</span> <span class="o">=</span> <span class="n">var</span><span class="o">.</span><span class="n">instance_var</span> <span class="s2">&quot;Bye&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;variable : &#39;Bye&#39;.&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;variable : &#39;Hello&#39;.&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;variable : &#39;Bye&#39;.&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クラスインスタンス変数</h3>

<p>Rubyでは、全てのインスタンス変数はカレントオブジェクト<code>self</code>に属している。クラスの定義の中では<code>self</code>はクラスのことになるから、下記にクラスに定義された<code>@var</code>はクラスに属していることになる。同じインスタンス変数<code>@var</code>だけどどこに定義されているかによって違い、それぞれ異なるスコープに定義されており、別々のオブジェクトに属している。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Variable</span>
</span><span class='line'>  <span class="vi">@var</span> <span class="o">=</span> <span class="s2">&quot;Class Instance Hello!&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@var</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">instance_var</span>
</span><span class='line'>    <span class="vi">@var</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">class_instance_var</span>
</span><span class='line'>    <span class="vi">@var</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span> <span class="o">=</span> <span class="no">Variable</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Instance Hello!&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Variable:0x007f8483c56bd8 @var=&quot;Instance Hello!&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">var</span><span class="o">.</span><span class="n">instance_var</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Instance Hello!&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="no">Variable</span><span class="o">.</span><span class="n">class_instance_var</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Class Instance Hello!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>１つ目<code>instance_var</code>メソッドで呼ばれた<code>@var</code>は<code>var</code>オブジェクトが<code>self</code>になる。つまり、<code>var</code>オブジェクトのインスタンス変数だ。２つ目の<code>class_instance_var</code>のクラス変数で呼ばれた<code>@var</code>は<code>Variable</code>が<code>self</code>になる。つまり、これは<code>Variable</code>オブジェクトのインスタンス変数だ。これは<code>Class</code>クラスのオブジェクトである<code>Variable</code>に属しているので通常のインスタンス変数だ。これをクラスインスタンス変数と呼ぶ。<br/>
クラスインスタンス変数はクラスからしかアクセスできない。クラスのインスタンスやサブクラスからはアクセスできない。</p>

<h2>参照</h2>

<p>メタプログラミングRuby 45p - インスタンス変数<br/>
メタプログラミングRuby 144 ~ 146p - クラスインスタンス変数</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyの値渡しと参照渡し]]></title>
    <link href="http://jq-jo.github.io/blog/2017/07/19/call-by-value-call-by-variable/"/>
    <updated>2017-07-19T20:33:53+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/07/19/call-by-value-call-by-variable</id>
    <content type="html"><![CDATA[<p>一般的に、引数は二つの方法がある。一つが値渡しで、もう一つが参照渡しである。<br/>
値渡しの概念はとても簡単。</p>

<ol>
<li>受け取るデータを格納する変数 (仮引数) を用意する。</li>
<li>データを引数に代入する。</li>
<li>関数の実行終了後、引数を廃棄する。</li>
</ol>


<p>値渡しのポイントは2番目。データを引数に代入するとき、データのコピーが行われる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb&gt; def foo(a)
</span><span class='line'>irb&gt; a = 100
</span><span class='line'>irb&gt; print a
</span><span class='line'>irb&gt; end
</span><span class='line'>=&gt; :foo
</span><span class='line'>irb&gt; x = 10
</span><span class='line'>=&gt; 10
</span><span class='line'>irb&gt; foo x
</span><span class='line'>100=&gt; nil
</span><span class='line'>irb&gt; x
</span><span class='line'>=&gt; 10</span></code></pre></td></tr></table></div></figure>


<p><code>foo</code>が参照渡しであれば、仮引数<code>a</code>の値を100に書き換えると、実引数である<code>x</code>の値も100になるはず。<code>foo(x)</code>を呼び出したあと、<code>x</code>の値は10のままなので、Rubyは「値渡し」であることがわかる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb&gt; def print_obj_id arg
</span><span class='line'>irb&gt; p "before change : #{int.object_id}"
</span><span class='line'>irb&gt; arg = 10
</span><span class='line'>irb&gt; p "after changed : #{int.object_id}"
</span><span class='line'>irb&gt; arg
</span><span class='line'>irb&gt; end
</span><span class='line'>
</span><span class='line'>irb&gt; int = 1
</span><span class='line'>
</span><span class='line'>irb&gt; p "int before func : #{int}"
</span><span class='line'>irb&gt; p "obj_id outside func : #{int.object_id}"
</span><span class='line'>irb&gt; p "excute func : #{print_obj_id int}"
</span><span class='line'>irb&gt; p "int after excuted func : #{int.object_id}"</span></code></pre></td></tr></table></div></figure>


<p>このコードに対する結果は下記のようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"int before func : 1"
</span><span class='line'>"obj_id outside func : 3"
</span><span class='line'>"before change : 3"
</span><span class='line'>"after changed : 21"
</span><span class='line'>"excute func : 10"
</span><span class='line'>"int after excuted func : 3"</span></code></pre></td></tr></table></div></figure>


<p>これは渡された仮引数の<code>arg</code>が変わっても実引数の変数<code>int</code>は変わらないことを証明する。<br/>
しかし、配列、hashなどは<code>mutable(書き換え可)</code>なオブジェクトなので、関数の引数に配列やhashを渡してそれを修正すると、呼び出し元の変数の値も書き換えられるようになる。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># arrayの場合
</span><span class='line'>irb&gt; def bar(x, y)
</span><span class='line'>irb&gt; x.push y
</span><span class='line'>irb&gt; x[0] = 10
</span><span class='line'>irb&gt; end
</span><span class='line'>=&gt; :bar
</span><span class='line'>irb&gt; a = [1, 2, 3]
</span><span class='line'>=&gt; [1, 2, 3]
</span><span class='line'>irb&gt; a.object_id
</span><span class='line'>=&gt; 70284299180520
</span><span class='line'>irb&gt; bar a, 4
</span><span class='line'>=&gt; 10
</span><span class='line'>irb&gt; a
</span><span class='line'>=&gt; [10, 2, 3, 4]
</span><span class='line'>irb&gt; a.object_id
</span><span class='line'>=&gt; 70284299180520
</span><span class='line'>
</span><span class='line'># hashの場合
</span><span class='line'>irb&gt; def baz x, y
</span><span class='line'>irb&gt; x.store "fourth", y
</span><span class='line'>irb&gt; x[:first] = 10
</span><span class='line'>irb&gt; end
</span><span class='line'>=&gt; :baz
</span><span class='line'>irb&gt; hash = {first: 1, second: 2, third: 3}
</span><span class='line'>=&gt; {:first=&gt;1, :second=&gt;2, :third=&gt;3}
</span><span class='line'>irb&gt; baz hash, 4
</span><span class='line'>=&gt; 10
</span><span class='line'>irb&gt; hash
</span><span class='line'>=&gt; {:first=&gt;10, :second=&gt;2, :third=&gt;3, "fourth"=&gt;4}</span></code></pre></td></tr></table></div></figure>


<p>上記のコードを見てみるとarrayの場合はarray変数の0番目indexの値が変わり、端っこにデータが追加されたのが確認できる。hashの場合も<code>first</code>のオブジェクトが変わり、端っこにデータが追加されたのが確認できる。</p>

<h2>追記</h2>

<p>オブジェクトはどうなるかについても試してみたので追記。<br/>
下記のようなクラスを作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Name</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@first_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_name</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">full_name</span>
</span><span class='line'>    <span class="n">full_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@last_name</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="vi">@first_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Name</code>のオブジェクトを作って<code>full_name</code>のメソッドを実行すると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span> <span class="o">=</span> <span class="no">Name</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Nobunaga&quot;</span><span class="p">,</span> <span class="s2">&quot;Oda&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Name:0x007f8483c1f8b8 @first_name=&quot;Nobunaga&quot;, @last_name=&quot;Oda&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Oda Nobunaga&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>普通に入力した通り<code>Oda Nobunaga</code>というフルネームが取得される。<br/>
ここで下記のようなクラスを作成して試してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Change</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name_obj</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_str</span>
</span><span class='line'>    <span class="vi">@name_obj</span><span class="o">.</span><span class="n">first_name</span><span class="p">(</span><span class="s2">&quot;hogehoge&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name_obj</span><span class="o">.</span><span class="n">last_name</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>この<code>Change</code>クラスに<code>create_name</code>オブジェクトを渡して実装してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span> <span class="o">=</span> <span class="no">Name</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Nobunaga&quot;</span><span class="p">,</span> <span class="s2">&quot;Oda&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Name:0x007f8483c1f8b8 @first_name=&quot;Nobunaga&quot;, @last_name=&quot;Oda&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Oda Nobunaga&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">change</span> <span class="o">=</span> <span class="no">Change</span><span class="o">.</span><span class="n">new</span> <span class="n">create_name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Change:0x007f84838aae58 @name_obj=#&lt;Name:0x007f84838c0898 @first_name=&quot;Nobunaga&quot;, @last_name=&quot;Oda&quot;&gt;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">change</span><span class="o">.</span><span class="n">change_name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span><span class="o">.</span><span class="n">full_name</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;foo hogehoge&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>create_name.full_name</code>を叩いた時に値が変わることが確認できる。<br/>
では、<code>create_name</code>と<code>Change</code>クラスの<code>@name_obj</code>の変数が同じものなのかな。確認してみよう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Change</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name_obj</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name_obj</span> <span class="o">=</span> <span class="n">obj</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change_name</span>
</span><span class='line'>    <span class="vi">@name_obj</span><span class="o">.</span><span class="n">first_name</span><span class="p">(</span><span class="s2">&quot;hogehoge&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name_obj</span><span class="o">.</span><span class="n">last_name</span><span class="p">(</span><span class="s2">&quot;foo&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Change</code>クラスに<code>attr_accessor</code>を追加して<code>@name_obj</code>を使えるようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span> <span class="o">=</span> <span class="no">Name</span><span class="o">.</span><span class="n">new</span> <span class="s2">&quot;Nobunaga&quot;</span><span class="p">,</span> <span class="s2">&quot;Oda&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Name:0x007f8483b03740 @first_name=&quot;Nobunaga&quot;, @last_name=&quot;Oda&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">change</span> <span class="o">=</span> <span class="no">Change</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">create_name</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Change:0x007f8483ae06c8 @name_obj=#&lt;Name:0x007f8483b03740 @first_name=&quot;Nobunaga&quot;, @last_name=&quot;Oda&quot;&gt;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span> <span class="o">===</span> <span class="n">change</span><span class="o">.</span><span class="n">name_obj</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span><span class="o">.</span><span class="n">equal?</span> <span class="n">change</span><span class="o">.</span><span class="n">name_obj</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">create_name</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">70103560887200</span>
</span><span class='line'><span class="n">irb</span><span class="o">&gt;</span> <span class="n">change</span><span class="o">.</span><span class="n">name_obj</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">70103560887200</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>create_name</code>と<code>@name_obj</code>は同じものだったそうだ。<br/>
ということで、オブジェクトも参照の値渡しということが分かってきた。</p>

<h2>参照</h2>

<p><a href="http://www.geocities.jp/m_hiroi/light/abcruby03.html">お気楽 Ruby プログラミング入門</a><br/>
<a href="http://blog.takanabe.tokyo/2015/08/25/1323/">Rubyの関数の引数は値渡しであることの証明をする</a><br/>
<a href="http://blog.cototoco.net/work/201406/%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%BC%95%E6%95%B0%EF%BC%88%E5%80%A4%E6%B8%A1%E3%81%97%E3%80%81%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%EF%BC%89/">メソッドの引数（値渡し、参照渡し）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capybara]]></title>
    <link href="http://jq-jo.github.io/blog/2017/07/05/capybara/"/>
    <updated>2017-07-05T19:07:09+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/07/05/capybara</id>
    <content type="html"><![CDATA[<p>capybaraはE2Eテストツールであり、ビューの単位テストができるようにしてくれる。<br/>
ちなみに、Rails5.1からはcapybaraがデフォルトのgemに入っている。</p>

<h2>準備</h2>

<p>今回のテストはrspecとcapybaraを使ってみる。</p>

<h4>install</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :test do
</span><span class='line'>  gem 'rspec-rails'
</span><span class='line'>  gem 'poltergeist'
</span><span class='line'>  gem 'capybara-screenshot'
</span><span class='line'>  gem 'database_rewinder'
</span><span class='line'>  gem 'factory_girl_rails'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>gemの説明をしてみると、<br/>
poltergeistはcapybara用ドライバーである。poltergeistを使えばphantomJSが提供するブラウザでテストすることができる。それとJSの実装やスクリーンショットも撮ることもできる。<br/>
capybara-screenshotはスクリーンショットの便利性のために使う。<br/>
database_rewinderはdatabaseのクリーナーであり、factory_girl_railsはモデルオブジェクトを作るために入れる。</p>

<ul>
<li>rspecのinstall</li>
</ul>


<p>rails generate rspec:install</p>

<ul>
<li>require</li>
</ul>


<p><code>spec/rails_helper.rb</code>に以下のように書き込む。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rspec/rails'
</span><span class='line'>require 'capybara/rails'
</span><span class='line'>require 'capybara/rspec'
</span><span class='line'>require 'capybara/poltergeist'
</span><span class='line'>require 'database_rewinder'
</span><span class='line'>
</span><span class='line'># capybara
</span><span class='line'>Capybara.app_host = "http://example.com"
</span><span class='line'>Capybara.always_include_port = true
</span><span class='line'>Capybara.default_max_wait_time = 5
</span><span class='line'>
</span><span class='line'>Capybara::Screenshot.autosave_on_failure = false
</span><span class='line'>
</span><span class='line'>Capybara.javascript_driver = :poltergeist
</span><span class='line'>
</span><span class='line'>Capybara.register_driver :poltergeist do |app|
</span><span class='line'>  Capybara::Poltergeist::Driver.new(app, {
</span><span class='line'>    inspector: true,
</span><span class='line'>    js_errors: false,
</span><span class='line'>    timeout: 1000,
</span><span class='line'>    phantomjs_options: [
</span><span class='line'>      '--load-images=no',
</span><span class='line'>      '--ignore-ssl-errors=yes',
</span><span class='line'>      '--ssl-protocol=any'
</span><span class='line'>    ]
</span><span class='line'>  })
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># database_rewinder
</span><span class='line'>RSpec.configure do |config|
</span><span class='line'>  config.before :suite do
</span><span class='line'>    DatabaseRewinder.clean_all
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  config.before(:each) do
</span><span class='line'>    DatabaseRewinder.clean
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  config.before(:each, js: true) do
</span><span class='line'>    DatabaseRewinder.strategy = :truncation
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  config.after :all do
</span><span class='line'>    DatabaseRewinder.clean
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<ul>
<li>PhantomJSのinstall</li>
</ul>


<p>poltergeistを使うためにphantomJsをインストールする。<br/>
macだとPhantomJSは<code>brew install phantomjs</code>で簡単に入れられる。</p>

<h2>簡単なテスト</h2>

<p>まず、テストのため、scaffoldでmodel, controller, viewを作る。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails g scaffold post title:string content:text</span></code></pre></td></tr></table></div></figure>


<p>そしたらこういうビューが作られる。<br/>
<img src="https://monosnap.com/file/tj8ppXp1gaIKCLWfrTv8MtWOJX9hpK.png" alt="Alt text" /></p>

<p>このページでPostを作成するテストをしてみる。<br/>
specフォルダーにpostsのフォルダーを追加、その中に<code>index_spec.rb</code>というファイルを作成する。<br/>
そして、そのファイルに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rails_helper'
</span><span class='line'>
</span><span class='line'>feature 'Post一覧画面の表示' do
</span><span class='line'>
</span><span class='line'>  scenario 'Postが作成できること', js: true do
</span><span class='line'>    visit posts_url
</span><span class='line'>    expect(page).to have_css('h1', text: 'Posts')
</span><span class='line'>    screenshot_and_open_image
</span><span class='line'>    click_link('New Post')
</span><span class='line'>    sleep 0.5
</span><span class='line'>    screenshot_and_open_image
</span><span class='line'>    fill_in('post_title', with: 'Title01')
</span><span class='line'>    screenshot_and_open_image
</span><span class='line'>    fill_in('post_content', with: 'Content01')
</span><span class='line'>    screenshot_and_open_image
</span><span class='line'>    click_button('Create Post')
</span><span class='line'>    sleep 0.5
</span><span class='line'>    find('p#notice', text: 'Post was successfully created.').visible?
</span><span class='line'>    screenshot_and_open_image
</span><span class='line'>    click_link('Back')
</span><span class='line'>    sleep 0.5
</span><span class='line'>    screenshot_and_open_image
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>こういうコードを入れてみる。<br/>
capybaraはいろんなDSLを提供している。<br/>
みたらすぐわかるくらいsimpleでわかりやすく使えるようになっている。<br/>
ちなみに、<code>fill_in('post_title', with: 'Title01')</code>は<code>find('input[name="post[title]"]').set('Title01')</code>に変えることもできる。同じように<code>click_link</code>も<code>find('hogehoge).click</code>に変えられる。<br/>
このテストの結果は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Post一覧画面の表示
</span><span class='line'>  Postが作成できること
</span><span class='line'>
</span><span class='line'>Finished in 4.42 seconds (files took 3.02 seconds to load)
</span><span class='line'>1 example, 0 failures</span></code></pre></td></tr></table></div></figure>


<p>こうなっていて、下はスクリーンショット。<br/>
<img src="https://monosnap.com/file/rHx38I8b2uTMxt0FRiko6tV0s79vK5.png" alt="Alt text" /><br/>
<img src="https://monosnap.com/file/3b4PuPHi5P0GoxmUGeQH9YeAMhtCmg.png" alt="Alt text" /><br/>
<img src="https://monosnap.com/file/D0HHkb249O7InIbj6uYGtRhpCL3WbD.png" alt="Alt text" /><br/>
<img src="https://monosnap.com/file/AFoXqrbQVrCst6o5eU4YXp6EAfkdsF.png" alt="Alt text" /><br/>
<img src="https://monosnap.com/file/pU9kmqZqSxEbmTOnA14Itg8YswivcT.png" alt="Alt text" /><br/>
<img src="https://monosnap.com/file/dh0IlY7zrAWj3uqgdXnkMsF1cYzYSg.png" alt="Alt text" /></p>

<h2>参考</h2>

<p><a href="http://www.sahara-ja.com/posts/3">RailsでRSpec+Capybara+factory_girl+その他テスト系gemのインストール方法</a><br/>
<a href="http://j-caw.co.jp/blog/?p=1388">Rails + Capybara + Rspecをセットアップして簡単なテストが通るまで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['vue-resource'とES6を使ってTodoを作成]]></title>
    <link href="http://jq-jo.github.io/blog/2017/06/21/vue-resource-and-es6/"/>
    <updated>2017-06-21T14:17:17+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/06/21/vue-resource-and-es6</id>
    <content type="html"><![CDATA[<h2>環境</h2>

<ul>
<li>Rails

<ul>
<li>5.1.1</li>
</ul>
</li>
<li>Vue.js

<ul>
<li>2.3.4</li>
</ul>
</li>
</ul>


<h2>ES6について</h2>

<p>Railsで<code>webpacker</code>を使って<code>Vue.js</code>を設置した場合、いろんなライブラリがdefaultでインストールされる。その中で<code>babel-loader</code>というライブラリがある。<br/>
<code>Package.json</code>を確認してみると、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "todo_example",
</span><span class='line'>  "private": true,
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "autoprefixer": "^7.1.1",
</span><span class='line'>    "babel-core": "^6.25.0",
</span><span class='line'>    "babel-loader": "7.x",
</span><span class='line'>    "babel-plugin-syntax-dynamic-import": "^6.18.0",
</span><span class='line'>    "babel-plugin-transform-class-properties": "^6.24.1",
</span><span class='line'>    "babel-polyfill": "^6.23.0",
</span><span class='line'>    "babel-preset-env": "^1.5.2",
</span><span class='line'>    "coffee-loader": "^0.7.3",
</span><span class='line'>    "coffee-script": "^1.12.6",
</span><span class='line'>    "compression-webpack-plugin": "^0.4.0",
</span><span class='line'>    "css-loader": "^0.28.4",
</span><span class='line'>    "extract-text-webpack-plugin": "^2.1.2",
</span><span class='line'>    "file-loader": "^0.11.2",
</span><span class='line'>    "glob": "^7.1.2",
</span><span class='line'>    "js-yaml": "^3.8.4",
</span><span class='line'>    "node-sass": "^4.5.3",
</span><span class='line'>    "path-complete-extname": "^0.1.0",
</span><span class='line'>    "postcss-loader": "^2.0.6",
</span><span class='line'>    "postcss-smart-import": "^0.7.4",
</span><span class='line'>    "precss": "^1.4.0",
</span><span class='line'>    "rails-erb-loader": "^5.0.2",
</span><span class='line'>    "resolve-url-loader": "^2.0.3",
</span><span class='line'>    "sass-loader": "^6.0.6",
</span><span class='line'>    "style-loader": "^0.18.2",
</span><span class='line'>    "vue": "^2.3.4",
</span><span class='line'>    "vue-loader": "^12.2.1",
</span><span class='line'>    "vue-template-compiler": "^2.3.4",
</span><span class='line'>    "webpack": "^2.6.1",
</span><span class='line'>    "webpack-manifest-plugin": "^1.1.0",
</span><span class='line'>    "webpack-merge": "^4.1.0"
</span><span class='line'>  },
</span><span class='line'>  "devDependencies": {
</span><span class='line'>    "webpack-dev-server": "^2.4.5"
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p><code>babel-loader</code>が置いてることが確認できる。<br/>
この<code>babel-loader</code>を<code>config/webpack/loaders</code>にある<code>babel.js</code>で読み込んでES6をトランスパイルしてくれる。<br/>
safariはまだES6をサポートしてくれないのでsafariで試してみる。<br/>
まず下記のように<code>babel.js</code>のloaderに<code>babel-loader</code>を指定したときは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js(\.erb)?$/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">loader</span><span class="o">:</span> <span class="s1">&#39;babel-loader&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://monosnap.com/file/5dFAfN76F8Gyw7IuTFQNfSrr6ZoDtT.png" alt="" /><br/>
画像のように正しくリストが表示されてる。
しかし、loaderのところを一回消してみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">test</span><span class="o">:</span> <span class="sr">/\.js(\.erb)?$/</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">exclude</span><span class="o">:</span> <span class="sr">/node_modules/</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// loader: &#39;babel-loader&#39;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://monosnap.com/file/9jb4l1lepTcOI5ptvKmhPNxPEp56j3.png" alt="" /><br/>
JSをES6で書いたので何も表示されてないことを確認できる。</p>

<p>もう一つ試してみる。<br/>
ES6的な<code>class</code>を定義してVueコンポーネントでそのclassの関数を呼び出してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">TodoLog</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">log</span><span class="p">){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="nx">log</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">printLog</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">log</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>シンプルにこういう<code>class</code>を定義してVueコンポーネントのmountedで呼び出すと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mounted</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;TodoList is mounted.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kr">const</span> <span class="nx">todoLog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TodoLog</span><span class="p">(</span><span class="s1">&#39;constructor is called.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">todoLog</span><span class="p">.</span><span class="nx">printLog</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://monosnap.com/file/4j9PEqb3y5bfDYqS5Lxb5lYz4BECYQ.png" alt="" />
<code>TodoLog</code>の<code>prinLog</code>という関数が呼び出されてブラウザにlogが出力されたのが確認できる。</p>

<h2>アロー関数</h2>

<p>vueでアロー関数を使うときは注意しなきゃいけないことがある。<br/>
アロー関数は既存のメソッドと違って<code>this</code>が変わる。関数自体が親コンテキストにバインディングされているためVueインスタンスにはならない。<br/>
<code>this</code>でVueのコンポーネントを呼ぶ処理をしたいならアロー関数は使ってはならない。<br/>
Vueのコンポーネントの<code>mounted</code>をアロー関数を例にして試してみると既存の<code>function()</code>だとちゃんとVueコンポーネントが出力されるが</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mounted</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;TodoList is mounted.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="err">#</span> <span class="k">this</span><span class="err">を出力してみる</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">that</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://monosnap.com/file/w5TNtJJyOD1df9QSW8GUKQrRfDjtFv.png" alt="" /><br/>
アロー関数を使った場合はVueコンポーネントが出力されないし、$httpもエラーを出す。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mounted</span><span class="o">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;TodoList is mounted.&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="err">#</span> <span class="k">this</span><span class="err">を出力してみる</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">url</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">that</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://monosnap.com/file/BBMdNQEuwTaa79wuIoznthJdxSIVQD.png" alt="" /></p>

<h2>vue-resource</h2>

<h3>install</h3>

<p>まずnpmで<code>vue-resource</code>をインストールする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">npm</span> <span class="nx">install</span> <span class="nx">vue</span><span class="o">-</span><span class="nx">resource</span> <span class="o">--</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>yarnを使ってもOK。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span> <span class="nx">yarn</span> <span class="nx">add</span> <span class="nx">vue</span><span class="o">-</span><span class="nx">resource</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<p>それから<code>js</code>で<code>import</code>して使う。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">import</span> <span class="nx">Vue</span> <span class="nx">from</span> <span class="s1">&#39;vue/dist/vue.min&#39;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">VueResource</span> <span class="nx">from</span> <span class="s1">&#39;vue-resource/dist/vue-resource.min&#39;</span>
</span><span class='line'><span class="nx">Vue</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VueResource</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">that</span> <span class="o">=</span> <span class="k">this</span>
</span><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;何かのurl&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">((</span><span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">that</span><span class="p">.</span><span class="nx">todos</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span>
</span><span class='line'><span class="p">},</span> <span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// error callback</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="https://codingexplained.com/coding/front-end/vue-js/using-es6-arrow-functions-vue-js">Using ES6 arrow functions in Vue.js</a><br/>
<a href="https://liginc.co.jp/266587">ES6の新機能「class構文」 – 基礎編 –</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webpacker]]></title>
    <link href="http://jq-jo.github.io/blog/2017/06/14/webpacker/"/>
    <updated>2017-06-14T15:51:37+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/06/14/webpacker</id>
    <content type="html"><![CDATA[<h2>Webpackとは</h2>

<p>最近、フロントエンドの規模が段々大きくなり、Javascriptのコード量が多くなって、コードのメンテナンスのためにモジュール化して管理する場合が多い。また、いろんなJSのフレームワークやNodeのライブラリを使うようになる。でもJSは基本的にこういうモジュール間の<code>import/include</code>をサポートしてくれないのでモジュールを管理するツールが必要になる。それのために出てきたものがモジュールバンドリングだ。モジュール間の依存性を理解し、それを元にうまく動ける静的アセットを作ることがモジュールバンドリングであり、それを実行するものがモジュールバンドラーだ。もちろん<code>Webpack</code>は唯一のモジュールバンドラーではない。既に<code>RequireJS</code>,<code>Browserify</code>などのモジュールバンドラーがあるけど、最近のフロントエンドには<code>Webpack</code>が主流になっている。</p>

<h2>RailsでのWebpack</h2>

<p>Rails5.1では<code>Webpack</code>を通して<code>React</code>,<code>Vue.js</code>,<code>Angular</code>,<code>Elm</code>などのフレームワークがサポートされ、さらに簡単に使えるようになった。webpackerを使えばプロジェクトにJSのフレームワークやライブラリを簡単に入れることができるし、Webpackのconfigを設定してBabelを使ってトランスパイルすることももちろんできる。</p>

<h2>webpackerの使い方</h2>

<h3>インストール</h3>

<p>Rails5.1には</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new myapp --webpack</span></code></pre></td></tr></table></div></figure>


<p>のように後ろに<code>--webpack</code>をつけてプロジェクト作成の時インストールするか普通にgemfileに入れて<code>bundle install</code>をしてから<code>./bin/rails webpacker:install</code>をすることでwebpackerを入れることができる。<br/>
Rails5.1でサポートする<code>React</code>,<code>Vue.js</code>,<code>Angular</code>,<code>Elm</code>を指定したい時は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rails new myapp --webpack=react
</span><span class='line'>$ rails new myapp --webpack=angular
</span><span class='line'>$ rails new myapp --webpack=vue
</span><span class='line'>$ rails new myapp --webpack=elm</span></code></pre></td></tr></table></div></figure>


<p>のように指定する。</p>

<h3>webpack-dev-server</h3>

<p>通常のwebpackコマンドも<code>--watch</code>または<code>-w</code>オプションつきで実行することによりファイルの変更を検知して自動でリビルドを行うことが可能だが、webpack-dev-serverはそれに加えて、ブラウザも自動的にリロードしてくれる（Automatic Refresh）。<br/>
ブラウザ全体のリロードではなく、編集したモジュールのみを更新する<code>Hot Module Replacement</code>という仕組みが使える。<br/>
といった機能を備えているため、ローカルで開発するには<code>webpack-dev-server</code>を使う方が便利。<br/>
それに、rails serverも同時に動かしているならば<code>foreman</code>というgemを使ったら便利。<a href="https://github.com/rails/webpacker">webpackerのgithubページ</a>にもそれを書いてある。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gem install foreman</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Procfile
</span><span class='line'>web: bundle exec rails s
</span><span class='line'>webpacker: ./bin/webpack-dev-server</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ foreman start</span></code></pre></td></tr></table></div></figure>


<h3>ブラウザに表示</h3>

<p>ビューに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= javascript_pack_tag 'app' %&gt;
</span><span class='line'>&lt;%= stylesheet_pack_tag 'app' %&gt;</span></code></pre></td></tr></table></div></figure>


<p>のように入れて使う。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/necojackarc/items/afa674ab10aafa9784eb">WebPackを使ってRailsからJavaScriptを楽に良い感じに分離する</a><br/>
<a href="https://github.com/rails/webpacker">webpacker</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[JS] Bower, Npmについて]]></title>
    <link href="http://jq-jo.github.io/blog/2017/05/24/bower-and-npm/"/>
    <updated>2017-05-24T18:16:33+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/05/24/bower-and-npm</id>
    <content type="html"><![CDATA[<p>bowerとnpmは両方ともパッケージが管理できるツール。<br>
npmはNode Package ModulesのことでNode.jsのライブラリやパッケージをインストールし、管理できる。<br>
bowerはツイッターが作ったフロントエンドのパッケージを管理ツールである。</p>

<h2>NPM(Node Package Modules)</h2>

<h3>インストール</h3>

<p>npmはNode.jsをインストールすると自動にインストールされる。</p>

<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 構成設定ファイルである package.json を作成する
</span><span class='line'>$ npm init
</span><span class='line'>
</span><span class='line'># プロジェクトのみインストール&アンインストール
</span><span class='line'>$ npm install &lt;package&gt; --save
</span><span class='line'>$ npm uninstall &lt;package&gt; --save
</span><span class='line'>
</span><span class='line'># グローバルインストール&アンインストール
</span><span class='line'>$ npm install -g &lt;package&gt;
</span><span class='line'>$ npm uninstall -g &lt;package&gt;
</span><span class='line'>
</span><span class='line'># package.jsonに記載されているパッケージをインストール
</span><span class='line'>$ npm install</span></code></pre></td></tr></table></div></figure>


<p>ちなみに<code>--save</code>をつけるとそのパッケージが依存している全てのパッケージも一気にインストールされる。</p>

<h3>Railsでの使い方</h3>

<ul>
<li>Railsの設定ファイル変更<br/>
<sub>config/initializers/assets.rb</sub></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Rails.application.config.assets.paths &lt;&lt; Rails.root.join('node_modules')</span></code></pre></td></tr></table></div></figure>


<ul>
<li>assetsで参照する<br/>
<code>require</code>や<code>import</code>を通して使うことができる</li>
</ul>


<h2>Bower</h2>

<h3>インストール</h3>

<p>bowerはNode.jsのパッケージなのでnpmでインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># node.jsのインストール
</span><span class='line'>$ brew install node
</span><span class='line'>
</span><span class='line'># bowerのインストール
</span><span class='line'>$ npm install -g bower</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 構成設定ファイルである bower.json を作成する
</span><span class='line'>$ bower init
</span><span class='line'>
</span><span class='line'># ライブラリを検索する
</span><span class='line'>$ bower search &lt;package&gt;
</span><span class='line'>
</span><span class='line'># パッケージを追加し、かつbower.jsonに記録する
</span><span class='line'>$ bower install &lt;package&gt; --save
</span><span class='line'>
</span><span class='line'># '#'をつけるとバージョンを指定してパッケージを追加できる
</span><span class='line'>$ bower install &lt;package&gt;#1.1.1 --save
</span><span class='line'>
</span><span class='line'># bower.jsonに記録されたパッケージをインストールする
</span><span class='line'>$ bower install
</span><span class='line'>
</span><span class='line'># パッケージを削除する
</span><span class='line'>$ bower uninstall &lt;package&gt;</span></code></pre></td></tr></table></div></figure>


<h3>構成設定ファイル</h3>

<ul>
<li>.bowerrc

<ul>
<li>directory属性設定でパッケージのインストールパス(bower_components)を指定する</li>
<li>手動でbowerを使うなら<code>.bowerrc</code>を手動で作らなきゃいけない</li>
</ul>
</li>
<li>bower.json

<ul>
<li>依存性及び開発バージョン情報などを表す</li>
</ul>
</li>
</ul>


<h2>bower-rails</h2>

<h3>インストール</h3>

<ul>
<li>gemfileに追加</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'bower-rails'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>bundle install</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle install</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># bowerを初期化
</span><span class='line'>$ rails g bower_rails:initialize
</span><span class='line'>
</span><span class='line'># Bowerfileに欲しいアセットを任意に追加
</span><span class='line'>asset '&lt;package name&gt;', '&lt;package version&gt;'
</span><span class='line'>
</span><span class='line'># bowerをインストール
</span><span class='line'>$ rake bower:install</span></code></pre></td></tr></table></div></figure>


<p>あとはインストールされたパッケージを<code>require</code>でロードして使う。</p>

<h2>参考</h2>

<p><a href="http://qiita.com/tsuuuuu_san/items/f29836c78e3eaffc4d68">npmの使い方</a><br/>
<a href="http://qiita.com/megane42/items/2ab6ffd866c3f2fda066#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E7%94%A8js-%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%ABbower">npm とか bower とか一体何なんだよ！Javascript 界隈の文脈を理解しよう</a><br/>
<a href="http://qiita.com/morrr/items/c16ae12272484a849737">Bower/bower-rails チートシート</a></p>
]]></content>
  </entry>
  
</feed>
