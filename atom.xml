<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[JQ Blog]]></title>
  <link href="http://jq-jo.github.io/atom.xml" rel="self"/>
  <link href="http://jq-jo.github.io/"/>
  <updated>2018-03-15T15:07:11+09:00</updated>
  <id>http://jq-jo.github.io/</id>
  <author>
    <name><![CDATA[Jo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveRecordの中身]]></title>
    <link href="http://jq-jo.github.io/blog/2018/03/08/active-record-nakami/"/>
    <updated>2018-03-08T18:47:11+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/03/08/active-record-nakami</id>
    <content type="html"><![CDATA[<h2>動的属性</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;activerecord&#39;</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">establish_connection</span> <span class="ss">:adapter</span> <span class="o">=&gt;</span> <span class="s2">&quot;sqlite3&quot;</span><span class="p">,</span>
</span><span class='line'>                                        <span class="ss">:database</span> <span class="o">=&gt;</span> <span class="s2">&quot;dbfile&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">create_table</span> <span class="ss">:tasks</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">string</span>   <span class="ss">:description</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">boolean</span>  <span class="ss">:completed</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Task</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;ブログの記事作成&#39;</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">completed</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">description</span> <span class="c1"># =&gt; &quot;ブログの記事作成&quot;</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">completed?</span>  <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードに属性にアクセスする４つのメソッドを呼び出している。（description=()、completed=()、description()、completed?()）<br/>
しかし、これらの「属性アクセサ」はTaskクラスの定義にはない。<br/>
では、このアクセサはどこからきたものなんだろうか。</p>

<h4>ActiveRecord::Base#method_missing()</h4>

<p>実際に<code>active_record/attribute_methods.rb</code>では<code>ActiveModel::AttributeMethods</code>を<code>include</code>して<code>method_missing()</code>を使っている。<code>method_missing()</code>が呼び出されたら該当メソッドがあるかどうかを判断し、ゴーストメソッドを生成する。そのゴーストメソッドはゴーストアクセサになり、動的に属性にアクセスすることができる。</p>

<h2>動的ファインダ</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="ss">:first</span><span class="p">,</span> <span class="ss">:conditions</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:completed</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">})</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">description</span> <span class="c1"># =&gt; &quot;ブログの記事作成&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="o">=</span> <span class="no">Task</span><span class="o">.</span><span class="n">find_by_description</span><span class="p">(</span><span class="s1">&#39;ブログの記事作成&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">task</span><span class="o">.</span><span class="n">id</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">find_all_by_completed</span><span class="p">(</span><span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">find_by_description_and_completed</span><span class="p">(</span><span class="s1">&#39;ブログの記事作成&#39;</span><span class="p">,</span> <span class="kp">true</span><span class="p">)</span>
</span><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">find_or_create_by_description</span><span class="p">(</span><span class="s1">&#39;ランチターイム&#39;</span><span class="p">)</span>
</span><span class='line'><span class="no">Task</span><span class="o">.</span><span class="n">find_by_description!</span><span class="p">(</span><span class="s1">&#39;帰宅&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ActiveRecord::Base.find</code>は<code>find_by_&lt;attr&gt;</code>のように属性名を含むメソッドでの検索もできる。<br/>
and, or での連結などもできる。<br/>
これも動的属性と同じく「ゴーストメソッド」で実装している。<br/>
ここでもやはり最初に<code>method_missing</code>でメソッドを定義して次からは直接呼び出せるようにしている。</p>

<h2>参照</h2>

<p><a href="https://github.com/rails/rails/tree/master/activerecord">rails/activerecord at master · rails/rails · GitHub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラス拡張ミックスインのサンプル作り]]></title>
    <link href="http://jq-jo.github.io/blog/2018/03/08/mixin-sample/"/>
    <updated>2018-03-08T14:13:16+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/03/08/mixin-sample</id>
    <content type="html"><![CDATA[<h2>課題</h2>

<ul>
<li>学校の先生、学生のリスト出力

<ul>
<li>全員のリスト</li>
<li>データを指定</li>
</ul>
</li>
</ul>


<h3>先生、学生のリスト出力</h3>

<ul>
<li>クラスメソッドを使って取り出す</li>
</ul>


<h3>指定データ出力</h3>

<ul>
<li>インスタンスメソッドを使って取り出す</li>
</ul>


<h2>前提</h2>

<ul>
<li>先生、学生のデータはそれぞれ<code>mixin_samples/students_data.rb</code>、<code>mixin_samples/teachers_data.rb</code>を使う</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">StudentsData</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">data</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Suzuki&#39;</span><span class="p">,</span> <span class="ss">japanese</span><span class="p">:</span> <span class="mi">70</span><span class="p">,</span> <span class="ss">math</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">science</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span> <span class="ss">english</span><span class="p">:</span> <span class="mi">70</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Sato&#39;</span><span class="p">,</span> <span class="ss">japanese</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span> <span class="ss">math</span><span class="p">:</span> <span class="mi">70</span><span class="p">,</span> <span class="ss">science</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="ss">english</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Takahashi&#39;</span><span class="p">,</span> <span class="ss">japanese</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span> <span class="ss">math</span><span class="p">:</span> <span class="mi">90</span><span class="p">,</span> <span class="ss">science</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="ss">english</span><span class="p">:</span> <span class="mi">70</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Tanaka&#39;</span><span class="p">,</span> <span class="ss">japanese</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">math</span><span class="p">:</span> <span class="mi">60</span><span class="p">,</span> <span class="ss">science</span><span class="p">:</span> <span class="mi">70</span><span class="p">,</span> <span class="ss">english</span><span class="p">:</span> <span class="mi">90</span> <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">TeachersData</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">data</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">46</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Ito&#39;</span><span class="p">,</span> <span class="ss">teaching_subject</span><span class="p">:</span> <span class="s1">&#39;国語&#39;</span><span class="p">,</span> <span class="ss">teaching_target</span><span class="p">:</span> <span class="s1">&#39;1年生&#39;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Watanabe&#39;</span><span class="p">,</span> <span class="ss">teaching_subject</span><span class="p">:</span> <span class="s1">&#39;数学&#39;</span><span class="p">,</span> <span class="ss">teaching_target</span><span class="p">:</span> <span class="s1">&#39;2年生&#39;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Yamamoto&#39;</span><span class="p">,</span> <span class="ss">teaching_subject</span><span class="p">:</span> <span class="s1">&#39;科学&#39;</span><span class="p">,</span> <span class="ss">teaching_target</span><span class="p">:</span> <span class="s1">&#39;3年生&#39;</span> <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span> <span class="ss">age</span><span class="p">:</span> <span class="mi">32</span><span class="p">,</span> <span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Nakamura&#39;</span><span class="p">,</span> <span class="ss">teaching_subject</span><span class="p">:</span> <span class="s1">&#39;英語&#39;</span><span class="p">,</span> <span class="ss">teaching_target</span><span class="p">:</span> <span class="s1">&#39;3年生&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Sample code</h2>

<h3>出力のための<code>TotalPrint</code>、<code>PersonalPrint</code>モジュールを定義する</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">TotalPrint</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print_data</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">convert_data</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print_names</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">names</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">convert_data</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; | &#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">names</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">val</span><span class="o">|</span> <span class="n">val</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">PersonalPrint</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">to_print</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">person_info</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">person_info</span>
</span><span class='line'>      <span class="n">args</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">k</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">v</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; | &#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>データ指定のための<code>Search</code>モジュールを定義する</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Search</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">search</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="n">objs</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="nb">hash</span><span class="o">|</span> <span class="nb">hash</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="ss">:name</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">?</span> <span class="nb">hash</span> <span class="p">:</span> <span class="kp">nil</span> <span class="p">}</span><span class="o">.</span><span class="n">compact</span>
</span><span class='line'>      <span class="n">objs</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">obj</span><span class="o">|</span> <span class="kp">new</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>モジュールをMixinするスーパークラスを定義する</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SchoolMember</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:args</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">include</span> <span class="no">PersonalPrint</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="no">TotalPrint</span>
</span><span class='line'>    <span class="kp">extend</span> <span class="no">Search</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@args</span> <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>実際の本体である先生、学生のクラスを定義する</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Teacher</span> <span class="o">&lt;</span> <span class="no">SchoolMember</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">TeachersData</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MixinSamples</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Student</span> <span class="o">&lt;</span> <span class="no">SchoolMember</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">StudentsData</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>結果</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">MixinSamples</span><span class="o">::</span><span class="no">Teacher</span><span class="o">.</span><span class="n">print_data</span>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">46</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Ito</span> <span class="o">|</span> <span class="ss">Teaching_subject</span><span class="p">:</span> <span class="err">国語</span> <span class="o">|</span> <span class="ss">Teaching_target</span><span class="p">:</span> <span class="mi">1</span><span class="err">年生</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">38</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Watanabe</span> <span class="o">|</span> <span class="ss">Teaching_subject</span><span class="p">:</span> <span class="err">数学</span> <span class="o">|</span> <span class="ss">Teaching_target</span><span class="p">:</span> <span class="mi">2</span><span class="err">年生</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">25</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Yamamoto</span> <span class="o">|</span> <span class="ss">Teaching_subject</span><span class="p">:</span> <span class="err">科学</span> <span class="o">|</span> <span class="ss">Teaching_target</span><span class="p">:</span> <span class="mi">3</span><span class="err">年生</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">32</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Nakamura</span> <span class="o">|</span> <span class="ss">Teaching_subject</span><span class="p">:</span> <span class="err">英語</span> <span class="o">|</span> <span class="ss">Teaching_target</span><span class="p">:</span> <span class="mi">3</span><span class="err">年生</span>
</span><span class='line'>
</span><span class='line'><span class="no">MixinSamples</span><span class="o">::</span><span class="no">Student</span><span class="o">.</span><span class="n">print_data</span>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">18</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Suzuki</span> <span class="o">|</span> <span class="ss">Japanese</span><span class="p">:</span> <span class="mi">70</span> <span class="o">|</span> <span class="ss">Math</span><span class="p">:</span> <span class="mi">80</span> <span class="o">|</span> <span class="ss">Science</span><span class="p">:</span> <span class="mi">90</span> <span class="o">|</span> <span class="ss">English</span><span class="p">:</span> <span class="mi">70</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">17</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Sato</span> <span class="o">|</span> <span class="ss">Japanese</span><span class="p">:</span> <span class="mi">60</span> <span class="o">|</span> <span class="ss">Math</span><span class="p">:</span> <span class="mi">70</span> <span class="o">|</span> <span class="ss">Science</span><span class="p">:</span> <span class="mi">50</span> <span class="o">|</span> <span class="ss">English</span><span class="p">:</span> <span class="mi">50</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">18</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Takahashi</span> <span class="o">|</span> <span class="ss">Japanese</span><span class="p">:</span> <span class="mi">90</span> <span class="o">|</span> <span class="ss">Math</span><span class="p">:</span> <span class="mi">90</span> <span class="o">|</span> <span class="ss">Science</span><span class="p">:</span> <span class="mi">100</span> <span class="o">|</span> <span class="ss">English</span><span class="p">:</span> <span class="mi">70</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">16</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Tanaka</span> <span class="o">|</span> <span class="ss">Japanese</span><span class="p">:</span> <span class="mi">80</span> <span class="o">|</span> <span class="ss">Math</span><span class="p">:</span> <span class="mi">60</span> <span class="o">|</span> <span class="ss">Science</span><span class="p">:</span> <span class="mi">70</span> <span class="o">|</span> <span class="ss">English</span><span class="p">:</span> <span class="mi">90</span>
</span><span class='line'>
</span><span class='line'><span class="n">teachers</span> <span class="o">=</span> <span class="no">MixinSamples</span><span class="o">::</span><span class="no">Teacher</span><span class="o">.</span><span class="n">search</span> <span class="s1">&#39;Ito&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="no">MixinSamples</span><span class="o">::</span><span class="ss">Teacher</span><span class="p">:</span><span class="mh">0x007fd7b1682910</span> <span class="vi">@age</span><span class="o">=</span><span class="mi">46</span><span class="p">,</span> <span class="vi">@name</span><span class="o">=</span><span class="s2">&quot;Ito&quot;</span><span class="p">,</span> <span class="vi">@teaching_subject</span><span class="o">=</span><span class="s2">&quot;国語&quot;</span><span class="p">,</span> <span class="vi">@teaching_target</span><span class="o">=</span><span class="s2">&quot;1年生&quot;</span><span class="o">&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">teachers</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">teacher</span><span class="o">|</span> <span class="n">teacher</span><span class="o">.</span><span class="n">to_print</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">46</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Ito</span> <span class="o">|</span> <span class="ss">Teaching_subject</span><span class="p">:</span> <span class="err">国語</span> <span class="o">|</span> <span class="ss">Teaching_target</span><span class="p">:</span> <span class="mi">1</span><span class="err">年生</span>
</span><span class='line'>
</span><span class='line'><span class="n">students</span> <span class="o">=</span> <span class="no">MixinSamples</span><span class="o">::</span><span class="no">Student</span><span class="o">.</span><span class="n">search</span> <span class="s1">&#39;Suzuki&#39;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[&lt;</span><span class="no">MixinSamples</span><span class="o">::</span><span class="ss">Student</span><span class="p">:</span><span class="mh">0x007fd7b1506500</span> <span class="vi">@age</span><span class="o">=</span><span class="mi">18</span><span class="p">,</span> <span class="vi">@args</span><span class="o">=</span><span class="p">{</span><span class="ss">:age</span><span class="o">=&gt;</span><span class="mi">18</span><span class="p">,</span> <span class="ss">:name</span><span class="o">=&gt;</span><span class="s2">&quot;Suzuki&quot;</span><span class="p">,</span> <span class="ss">:japanese</span><span class="o">=&gt;</span><span class="mi">70</span><span class="p">,</span> <span class="ss">:math</span><span class="o">=&gt;</span><span class="mi">80</span><span class="p">,</span> <span class="ss">:science</span><span class="o">=&gt;</span><span class="mi">90</span><span class="p">,</span> <span class="ss">:english</span><span class="o">=&gt;</span><span class="mi">70</span><span class="p">},</span> <span class="vi">@english</span><span class="o">=</span><span class="mi">70</span><span class="p">,</span> <span class="vi">@japanese</span><span class="o">=</span><span class="mi">70</span><span class="p">,</span> <span class="vi">@math</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="vi">@name</span><span class="o">=</span><span class="s2">&quot;Suzuki&quot;</span><span class="p">,</span> <span class="vi">@science</span><span class="o">=</span><span class="mi">90</span><span class="o">&gt;]</span>
</span><span class='line'>
</span><span class='line'><span class="n">students</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">student</span><span class="o">|</span> <span class="n">student</span><span class="o">.</span><span class="n">to_print</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span>
</span><span class='line'><span class="ss">Age</span><span class="p">:</span> <span class="mi">18</span> <span class="o">|</span> <span class="ss">Name</span><span class="p">:</span> <span class="no">Suzuki</span> <span class="o">|</span> <span class="ss">Japanese</span><span class="p">:</span> <span class="mi">70</span> <span class="o">|</span> <span class="ss">Math</span><span class="p">:</span> <span class="mi">80</span> <span class="o">|</span> <span class="ss">Science</span><span class="p">:</span> <span class="mi">90</span> <span class="o">|</span> <span class="ss">English</span><span class="p">:</span> <span class="mi">70</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveRecordの設計]]></title>
    <link href="http://jq-jo.github.io/blog/2018/02/21/active-record-sekkei/"/>
    <updated>2018-02-21T18:43:01+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/02/21/active-record-sekkei</id>
    <content type="html"><![CDATA[<h2>ActiveRecordの設計</h2>

<p><code>ActiveRecord</code>はRailsの一部であり、Rubyのオブジェクトをデータベースのテーブルにマッピングするものである。この機能を<strong>オブジェクトリレーショナルマッピング</strong>と呼ぶ。<br/>
<code>ActiveRecord</code>はRailsアプリケーションでは、モデル（MVCの「M」）として使われる。通常のRubyのオブジェクトでビジネスロジックを管理し、<code>ActiveRecord</code>でオブジェクトをデータベースに永続化することになる。</p>

<h4>ActiveRecordの簡単な例</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Duck</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">validates_length_of</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">6</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の例では、6文字より長い<code>name</code>をデータベースに保存しようとすると、例外を発生するか（save!の場合）、何も言わずに失敗する（saveの場合）。<br/>
<code>ActiveRecord</code>は規約に基づいて、自動的に<code>Duck</code>クラスを<code>ducks</code>テーブルにマッピングしてくれる。データベーススキーマから<code>ducks</code>テーブルに<code>name</code>が含まれることを認識し、属性にアクセスするゴーストメソッドを定義する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_duck</span> <span class="o">=</span> <span class="no">Duck</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">my_duck</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;Donald&quot;</span>
</span><span class='line'><span class="n">my_duck</span><span class="o">.</span><span class="n">valid?</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="n">my_duck</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">some_duck</span> <span class="o">=</span> <span class="no">Duck</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">some_duck</span><span class="o">.</span><span class="n">id</span>   <span class="c1"># =&gt; 1</span>
</span><span class='line'><span class="n">some_duck</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; &quot;Donald&quot;</span>
</span><span class='line'><span class="n">some_duck</span><span class="o">.</span><span class="n">delete</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように使われる。</p>

<h4>ActiveRecord::Base</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># gems/activerecord-x.x.x/lib/active_record.rb</span>
</span><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Base</span><span class="p">,</span> <span class="s1">&#39;active_record/base&#39;</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Batches</span><span class="p">,</span> <span class="s1">&#39;active_record/batches&#39;</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Calculations</span><span class="p">,</span> <span class="s1">&#39;active_record/calculations&#39;</span>
</span><span class='line'>  <span class="nb">autoload</span> <span class="ss">:Callbacks</span><span class="p">,</span> <span class="s1">&#39;active_record/callbacks&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ActiveRecord</code>は<code>autoload()</code>を使って各モジュールを読み込んでいる。<code>Kernel#autoload()</code>はモジュール名とファイル名を受け取り、モジュールを最初に参照した時にファイルを自動的に読み込む。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Base</span>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">find</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">first</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">last</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">public</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">id</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">save</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">save!</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">delete</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ActiveRecord::Base</code>には上記のコードのようにクラスメソッド、インスタンスメソッドを定義している。</p>

<h4>ActiveRecord::Validations</h4>

<p>先ほど使ってた<code>valid?()</code>や<code>validates_length_of()</code>などのメソッドは<code>ActiveRecord::Validations</code>モジュールで定義されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Validations</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">alias_method_chain</span> <span class="ss">:save</span><span class="p">,</span> <span class="ss">:validation</span>
</span><span class='line'>        <span class="n">alias_method_chain</span> <span class="ss">:save!</span><span class="p">,</span> <span class="ss">:validation</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">send</span> <span class="ss">:include</span><span class="p">,</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Callbacks</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">module</span> <span class="nn">ClassMethods</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">validate_each</span><span class="p">(</span><span class="o">*</span><span class="n">attrs</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">validates_confirmation_of</span><span class="p">(</span><span class="o">*</span><span class="n">attr_names</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">validates_length_of</span><span class="p">(</span><span class="o">*</span><span class="n">attrs</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>      <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save_with_validation</span><span class="p">(</span><span class="n">perform_validation</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span> <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save_with_validation!</span> <span class="c1"># ...</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">valid?</span> <span class="c1"># ...</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>ActiveRecord::Base</code>は<code>ActiveRecord::Validations</code>をインクルードしていて、さらにフックメソッドを通してクラスメソッドも手に入れている。これは<strong>クラス拡張ミックスイン</strong>である。<code>ActiveRecord::Base</code>はモジュールのインクルードを繰り返して、メソッドを積み上げていく。</p>

<h4>alias_method_chain()</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greet</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greet</span> <span class="c1"># =&gt; Hello!</span>
</span></code></pre></td></tr></table></div></figure>


<p>例えば、この<code>greet</code>メソッドの周りにロギング機能をつけたいとする場合、<strong>アラウンドエイリアス</strong>を使えば良い。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greet_with_log</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;メソッド呼び出し開始..&quot;</span>
</span><span class='line'>    <span class="n">greet_without_log</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;...メソッド呼び出し完了&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:greet_without_log</span><span class="p">,</span> <span class="ss">:greet</span>
</span><span class='line'>  <span class="n">alias_method</span> <span class="ss">:greet</span><span class="p">,</span> <span class="ss">:greet_with_log</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">greet</span>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="s2">&quot;メソッド呼び出し開始..&quot;</span>
</span><span class='line'><span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'><span class="s2">&quot;...メソッド呼び出し完了&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>このような仕組みをRailsでは<code>Module#alias_method_chain()</code>を使って使用できる。これは<code>ActiveSupport</code>ライブラリで提供されている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveRecord</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Validations</span>
</span><span class='line'>    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">extend</span> <span class="no">ClassMethods</span>
</span><span class='line'>      <span class="n">base</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">alias_method_chain</span> <span class="ss">:save</span><span class="p">,</span> <span class="ss">:validation</span>
</span><span class='line'>        <span class="n">alias_method_chain</span> <span class="ss">:save!</span><span class="p">,</span> <span class="ss">:validation</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードでは<code>ActiveRecord::Base</code>クラスを再オープンして、<code>save()</code>と<code>save!()</code>に検証機能をつけている。これでオブジェクトをデータベースに保存した時に自動的に検証を行ってくれる。</p>

<h4>ActiveRecordのまとめ</h4>

<p><code>ActiveRecord::Base</code>は<code>ActiveRecord</code>のメインとなるクラスだ。インスタンスメソッドとクラスメソッドが定義されているが、それ以外にも<code>ActiveRecord::Validations</code>のような追加モジュールをインクルードしている。モジュールをインクルードする際、クラス拡張ミックスインをして、さらに別のモジュールをインクルードする。こうしたモジュールは<code>alias_method_chain()</code>を使ってさらにいろんなメソッドを生み出す。このように次々にメソッドが定義されて、<code>ActiveRecord::Base</code>は巨大なクラスになっていく。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[コードを記述するコード]]></title>
    <link href="http://jq-jo.github.io/blog/2018/02/14/code-to-write-the-code/"/>
    <updated>2018-02-14T19:14:17+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/02/14/code-to-write-the-code</id>
    <content type="html"><![CDATA[<h2>eval()</h2>

<p><code>eval()</code>を使うと<code>コード文字列</code>を使って処理できる。例えば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="o">]</span>
</span><span class='line'><span class="n">element</span> <span class="o">=</span> <span class="mi">30</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;array &lt;&lt; element&quot;</span><span class="p">)</span> <span class="c1"># =&gt; [10, 20, 30]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>evalの問題点</h4>

<p>evalが評価するコード文字列内でもローカル変数にアクセスできる。
そういう意味ではブロックと似ている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">v1</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;v1&quot;</span><span class="p">)</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>evalとブロックどちらを使うのが良いのか。<br/>
答えは「ブロック」らしい。コード文字列(evalを用いた処理記述)は問題点がある。</p>

<p><strong>コードインジェクション</strong></p>

<p>外部からコード文字列を読み込んだ際に、悪意のあるコードを読み込んでしまい、<br/>
プライベート情報漏洩やハードディスクの情報を消されたりしてしまう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;&#39;a&#39;.</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 悪意のあるコード プライベートな情報が表示されてしまう。</span>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="nb">object_id</span><span class="p">;</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;a&#39;</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;*&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>オブジェクトの汚染とセーフレベル</strong></p>

<p>Rubyは安全でないオブジェクトに汚染マークを付ける。<br/>
webフォーム、コマンドライン、システム変数の読み込み文字列などを含んでいた場合、安全でないと判断する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_input</span> <span class="o">=</span> <span class="s2">&quot;User input: </span><span class="si">#{</span><span class="nb">gets</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="c1"># 汚染されているかどうかをチェック</span>
</span><span class='line'><span class="nb">puts</span> <span class="n">user_input</span><span class="o">.</span><span class="n">tainted?</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>汚染マークを検知して、例外を発生させるセーフレベルという仕組みがある。<br/>
潜在的に危険な操作に対して制限をかけられる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># セーフレベルを１に設定</span>
</span><span class='line'><span class="n">user_input</span> <span class="o">=</span> <span class="s2">&quot;User input: </span><span class="si">#{</span><span class="nb">gets</span><span class="p">()</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="nb">eval</span> <span class="n">user_input</span>
</span><span class='line'>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="c1"># セーフレベル1以上の場合、汚染した文字列を評価できない</span>
</span><span class='line'><span class="ss">SecurityError</span><span class="p">:</span> <span class="no">Insecure</span> <span class="n">operatiion</span> <span class="o">-</span> <span class="nb">eval</span>
</span></code></pre></td></tr></table></div></figure>


<h2>フックメソッド</h2>

<p>さまざまなイベントを契機に処理を行うことができる。(継承、拡張など)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="c1"># includedがフックメソッド </span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">included</span><span class="p">(</span><span class="n">othermod</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># MyModuleが拡張されると下記が処理される</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;MyModuleは </span><span class="si">#{</span><span class="n">othermod</span><span class="si">}</span><span class="s2">にmixinされた&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; MymoduleはCにmixinされた</span>
</span></code></pre></td></tr></table></div></figure>


<h4>その他のフックメソッド</h4>

<ul>
<li>Class#inherited()</li>
<li>Module#extend_object()</li>
<li>Module#method_added()</li>
<li>Module#method_removed()</li>
<li>Module#method_undefined()</li>
</ul>


<p>などをオーバーライドすれば、そのイベントに関連したメソッドを実行できる。</p>

<h2>参考</h2>

<p><a href="http://tamata78.hatenablog.com/entry/2015/09/19/172049">http://tamata78.hatenablog.com/entry/2015/09/19/172049</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラス定義②]]></title>
    <link href="http://jq-jo.github.io/blog/2018/02/14/class-teigi-2/"/>
    <updated>2018-02-14T17:36:52+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/02/14/class-teigi-2</id>
    <content type="html"><![CDATA[<h2>特異クラス</h2>

<p>特異メソッドはどのクラスに所属しているのか。<br/>
特異メソッドの定義クラスにおけるインスタンスメソッドだと全インスタンスに引き継がれてしまう。<br/>
Objectクラスだと全クラスに引き継がれてしまう。ではどこに所属しているのか。
特異クラスという特殊なクラスに所属している。</p>

<h4>特異クラスのオープン</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">an_object</span>
</span><span class='line'><span class="err">　</span><span class="c1">#処理を記述</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>特異クラスの参照を取得</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">eigenclass</span> <span class="o">=</span> <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="n">obj</span>
</span><span class='line'>  <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">eigenclass</span><span class="o">.</span><span class="n">class</span> <span class="c1"># =&gt; Class</span>
</span></code></pre></td></tr></table></div></figure>


<h4>特異クラスの特別なところ</h4>

<ul>
<li>インスタンスを１つしか持てない（だからシングルトンクラスとも呼ばれる）</li>
<li>継承ができない</li>
<li>特異クラスはオブジェクトの特異メソッドが住んでいる場所</li>
</ul>


<h4>クラスメソッドの構文</h4>

<p>この前の記事でクラスメソッドを定義する方法の２つを書いてたけど、もう１つがある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="nb">puts</span> <span class="s2">&quot;Hello!&quot;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; &quot;Hello!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>クラスの属性を定義する</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="c1"># これだとインスタンスの属性定義になってしまう</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:a</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">a</span> <span class="c1"># =&gt; NoMethodError: undefined method `a&#39; for MyClass:Class</span>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">a</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:c</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="s1">&#39;It works!&#39;</span>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">c</span> <span class="c1"># =&gt; &quot;It works!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>クラス拡張</h2>

<p>moduleのインスタンスメソッドをクラスメソッドとして定義させるとき<br/>
クラス拡張という方法で実現できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">MyModule</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="c1"># 特異クラス内でインスタンスメソッドを拡張させるとクラスメソッドとして定義可能</span>
</span><span class='line'>    <span class="kp">include</span> <span class="no">MyModule</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Object#extendを用いれば、もっとシンプルに定義できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">MyModule</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Myclass</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h2>エイリアス</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">alias</span> <span class="p">:</span><span class="err">新しい名前</span> <span class="p">:</span><span class="err">古い名前</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>aliasはキーワードであり、メソッドではいので二つの間にカンマはいらない</li>
<li>参照を向けるのではなく、コピーする。だから、aliasコマンドの後で元となるメソッドに変更が加えられても、aliasによって作成されたメソッドには影響がない</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="s2">&quot;my_method()&quot;</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:my_method2</span> <span class="ss">:my_method</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt;  &quot;my_method()&quot;</span>
</span><span class='line'><span class="n">m</span><span class="o">.</span><span class="n">my_method2</span> <span class="c1"># =&gt;  &quot;my_method()&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように使える。</p>

<h4>aliasの用途</h4>

<p>元のメソッドを修正したいが、外部ライブラリなどで修正できない場合がある。<br/>
その場合は、元メソッドを別名定義し、元メソッド名でメソッドを再定義する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;original&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">alias</span> <span class="ss">:my_method2</span> <span class="ss">:my_method</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;changed&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">mc</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">mc</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; changed</span>
</span><span class='line'><span class="n">mc</span><span class="o">.</span><span class="n">my_method2</span> <span class="c1"># =&gt; original</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p><a href="http://tamata78.hatenablog.com/entry/2015/09/16/205224">http://tamata78.hatenablog.com/entry/2015/09/16/205224</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[クラス定義①]]></title>
    <link href="http://jq-jo.github.io/blog/2018/02/08/class-teigi-1/"/>
    <updated>2018-02-08T11:16:12+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/02/08/class-teigi-1</id>
    <content type="html"><![CDATA[<h2>知っておくべきこと</h2>

<h4>Rubyにおけるクラスとは</h4>

<p>Rubyにおけるクラス定義は「コードを実行する」ということだ。JavaやC#ではクラスを定義してもそのクラスのオブジェクトを生成して、メソッドを呼び出すまで何も起きない。しかし、Rubyでクラスを定義するということはオブジェクトの動作を規定することではなく、コードを実行するということなのだ。</p>

<h2>クラスインスタンス変数 &amp; クラス変数</h2>

<h4>クラスインスタンス変数</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vi">@my_var</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうにクラスにもインスタンス変数が定義できる。ここの<code>@my_var</code>はクラス定義の中にあるのでクラスに属している。<br/>
だからクラスのオブジェクトのインスタンス変数とは別物ということだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vi">@my_var</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">read</span><span class="p">;</span> <span class="vi">@my_var</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">write</span><span class="p">;</span> <span class="vi">@my_var</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">read</span><span class="p">;</span> <span class="vi">@my_var</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">write</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">read</span>     <span class="c1"># =&gt; 2</span>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">read</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードには２つのインスタンス変数を定義している。どちらも<code>@my_var</code>という名前だ。しかし、それぞれ異なるスコープに定義されており、別々のオブジェクトに属している。上記のコードの<code>MyClass</code>のオブジェクトの<code>obj</code>は<code>MyClass</code>クラスのインスタンス変数の<code>@my_var</code>は呼べない。同じく<code>obj</code>の外側からも<code>obj</code>のインスタンス変数の<code>@my_var</code>が呼べないのだ。<br/>
こういうふうにクラスが<code>self</code>となる場所に定義されているインスタンス変数を<strong>クラスインスタンス変数</strong>と呼ぶ。</p>

<h4>クラス変数</h4>

<p>クラス変数は<code>@@</code>をつけて定義できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="vc">@@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>これはクラスインスタンス変数とは違う。サブクラスや通常のインスタンスメソッドからもアクセスできる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">D</span> <span class="o">&lt;</span> <span class="n">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span><span class="p">;</span> <span class="vc">@@v</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">D</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>しかし、クラス変数の使いには少し気をつけないといけないところがある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vc">@@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="vc">@@v</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="vc">@@v</span> <span class="c1"># =&gt; 2</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@@v</code>の値が変わるのはこのクラス変数がクラスではなく、クラス階層に属しているからだ。<code>@@v</code>は<code>main</code>のコンテキストに定義されているので、<code>main</code>のクラスである<code>Object</code>の全ての子系にも属しているということになり、全部同じクラス変数を共有しているからだ。</p>

<h2>特異メソッド</h2>

<h4>特異メソッド</h4>

<p>Rubyでは、特定のオブジェクトにメソッドを追加できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;just a regular string&quot;</span> <span class="c1"># 普通の文字列</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">str</span><span class="o">.</span><span class="nf">title?</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">upcase</span> <span class="o">==</span> <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">title?</span>                 <span class="c1"># =&gt; false</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">methods</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/title?/</span><span class="p">)</span> <span class="c1"># =&gt; [&quot;title?&quot;]</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">singleton_methods</span>      <span class="c1"># =&gt; [&quot;title?&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードは<code>title?</code>メソッドを文字列<code>str</code>に追加している。<code>String</code>クラスの他のオブジェクトには影響はない。<br/>
こうしたあるオブジェクトに特化したメソッドのことを<strong>特異メソッド</strong>と呼ぶ。</p>

<h4>クラスメソッドの真実</h4>

<p>クラスメソッドはクラスの特異メソッドである。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 特異メソッドの定義</span>
</span><span class='line'><span class="k">def</span> <span class="nc">MyClass</span><span class="o">.</span><span class="nf">class_method</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># クラスメソッドの定義</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">class_method</span><span class="p">;</span> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の２つの定義は同じものなのだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">object</span><span class="o">.</span><span class="nf">method</span>
</span><span class='line'>  <span class="c1"># メソッドの中身</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記の<code>object</code>の部分にはオブジェクトの参照、クラス名の定数、selfのいずれかが使える。つまり、クラスメソッドはselfを使った特異メソッドである。</p>

<h4>クラスマクロ</h4>

<p><code>Module#attr_*()</code>族のメソッドを使えば、一気にオブジェクトに対するアクセサを生成できる。<br/>
<code>Module#attr_reader</code>は読み取り用、<code>Module#attr_writer</code>は書き込み用、<code>Module#attr_accessor</code>は読み書き両用だ。<br/>
コードで見てみると</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="c1"># =&gt; NoMethodError: undefined method `name&#39; for #&lt;Person:0x007f88d1cbbb58&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>NoMethodErrorが出てしまう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="vi">@name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span>        <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Jo&#39;</span> <span class="c1"># =&gt; NoMethodError: undefined method `name=&#39; for #&lt;Person:0x007f88d1ede5e8&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>name</code>のメソッドは読み込めるが、アクセスはできない。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="vi">@name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span>        <span class="c1"># =&gt; nil</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Jo&#39;</span> <span class="c1"># =&gt; &quot;Jo&quot;</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span>        <span class="c1"># =&gt; &quot;Jo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでインスタンス変数の<code>@name</code>にアクセスできる。<br/>
これはこうもかける。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_writer</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">greeting</span>
</span><span class='line'>    <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="vi">@name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">person</span> <span class="o">=</span> <span class="no">Person</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;Jo&#39;</span> <span class="c1"># =&gt; &quot;Jo&quot;</span>
</span><span class='line'><span class="n">person</span><span class="o">.</span><span class="n">greeting</span>    <span class="c1"># =&gt; &quot;Hello, Jo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう使える。<br/>
このようなメソッドを<strong>クラスマクロ</strong>と呼ぶ。<br/>
クラスマクロはキーワードのように見えるが、クラス定義の中で使えるクラスメソッドである。</p>

<h2>&amp;Check</h2>

<h4>&amp;Checkでのクラスメソッド</h4>

<p><code>form</code>クラスでよくクラスメソッドを使っている。</p>

<ul>
<li>例</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CandidatePanelCsvForm</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">model_name</span>
</span><span class='line'>    <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Name</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;CandidatePanelCsvForm&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>&amp;Checkでのクラスマクロ</h4>

<p><code>form</code>, <code>service</code>, <code>usecase</code>などで幅広く使われている。（<code>attr_accessor</code>, <code>attr_reader</code>）</p>

<ul>
<li>例</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Csv</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">ResponseSetsService</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:filer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">resource_owner</span><span class="p">,</span> <span class="n">survey</span><span class="p">,</span> <span class="o">**</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@resource_owner</span> <span class="o">=</span> <span class="n">resource_owner</span>
</span><span class='line'>      <span class="vi">@survey</span>         <span class="o">=</span> <span class="n">survey</span>
</span><span class='line'>      <span class="vi">@survey_group</span>   <span class="o">=</span> <span class="n">survey</span><span class="o">.</span><span class="n">group</span>
</span><span class='line'>      <span class="vi">@args</span>           <span class="o">=</span> <span class="n">args</span>
</span><span class='line'>      <span class="vi">@filer</span>          <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">Missions</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">RecipientService</span>
</span><span class='line'>    <span class="kp">attr_reader</span> <span class="ss">:burden</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">delegate</span> <span class="ss">:commenter</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:burden</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">burden</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@burden</span> <span class="o">=</span> <span class="n">burden</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>全然関係ないけど気になるやつ</h2>

<h4>delegate</h4>

<p>上記のコードの中で<code>delegate</code>というのがあったけど、<code>delegate</code>は何物か気になったから調べておく。<br/>
<code>delegate</code>は<code>has_one, through</code>と似たようなもので、<code>to</code>で指名しているオブジェクトからの関係あるモデルを呼び出せるらしい。<br/>
上記では<code>to</code>で<code>:burden</code>を指名しているから、<code>:burden</code>の関係モデルの中の<code>commenter</code>を持ってこれる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Qualitative</span><span class="o">::</span><span class="no">SurveyGroupComment</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_related_actors</span>
</span><span class='line'>    <span class="n">recipient_service</span> <span class="o">=</span> <span class="no">Missions</span><span class="o">::</span><span class="no">RecipientService</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">・・・</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードでわかるように渡される<code>burden</code>は<code>Qualitative::SurveyGroupComment</code>のオブジェクトである。<br/>
だから、<code>delegate</code>を使って<code>Qualitative::SurveyGroupComment</code>オブジェクトの関係モデルの<code>commenter</code>オブジェクトを呼び出すことができるということだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Missions</span><span class="o">::</span><span class="no">RecipientService</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">commenter</span>
</span></code></pre></td></tr></table></div></figure>


<p>のように使える。</p>

<h2>次の記事</h2>

<p><strong>第4章 クラス定義</strong>の残った分量の</p>

<ul>
<li>特異クラス</li>
<li>アラウンドエイリアス</li>
</ul>


<p>あと、</p>

<ul>
<li><strong>第５章「コードを記述するコード」</strong></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブロック②]]></title>
    <link href="http://jq-jo.github.io/blog/2018/02/01/block/"/>
    <updated>2018-02-01T10:34:02+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/02/01/block</id>
    <content type="html"><![CDATA[<h2>instance_eval</h2>

<h4>instance_evalとは</h4>

<p>フラットスコープよりもっと簡単にコードと束縛を好きなように組み合わせる方法がある。<code>instance_eval</code>メソッドだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@v</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="vi">@v</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; 1</span>
</span><span class='line'>
</span><span class='line'><span class="n">v</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">instance_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@v</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="vi">@v</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>ブロックはレシーバをselfとしたコンテキストで評価されるので、ブロックからレシーバのプライベートメソッドや@vなどのインスタンス変数にアクセスできる。<br/>
instance_eval()に渡したブロックをコンテキスト探索機と呼ぶ。</p>

<h4>カプセル化の破壊</h4>

<p>このコンテキスト探索機を使うとカプセル化を破壊できてしまう。でもこのコンテキスト探索機が必要になる時がある。例えば、irbからオブジェクトの中身をすぐにみたいとかの場合もある。こういう場合、そのオブジェクトに入っていくには<code>instance_eval</code>が最も近道になる。<br/>
テスト環境で何かのオブジェクトをテストする時も、データベースにアクセスするメソッドをシンプルな定数値と入れ替えることができる。</p>

<h2>呼び出し可能オブジェクト</h2>

<p>呼び出し可能オブジェクトに対しては前記事を書いたので、簡単にまとめてみる。<br/>
<a href="https://jq-jo.github.io/blog/2017/12/27/block-proc-lambda/">前の記事</a><br/>
ブロックの使用は２つに分けられる。まず、コードを保管する。それから、そのブロックを呼び出して実行する。でも、「コードを保管して、あとで呼び出す。」方式はブロックに限らない。Rubyではコードを保管できる場所が他に３つがある。</p>

<ul>
<li>Procの中。（ブロックがオブジェクトになったもの）</li>
<li>lambdaの中。（Procの変形）</li>
<li>メソッドの中。</li>
</ul>


<h4>Procオブジェクト</h4>

<ul>
<li>ブロックはオブジェクトじゃない</li>
<li>ブロックを保管して、あとで呼び出すためにはブロックがオブジェクトになる必要がある。そのために、Rubyの標準ライブラリProcがある</li>
<li>ブロックを評価するには、Proc#call()で呼び出す</li>
<li>ブロックを保管して、あとで呼び出す技術を遅延評価と呼ぶ</li>
<li>ブロックをProcに変換する方法は４つがある

<ul>
<li>Proc.new</li>
<li>lambda()</li>
<li>proc()</li>
<li>&amp;修飾</li>
</ul>
</li>
</ul>


<h2>&amp;Checkでのブロック</h2>

<p>&amp;Checkにはいくつかのところでブロックを使用している。まず、モデルクラスでの<code>scope</code>にlambdaを多く使っている。<br/>
あと、<code>SurveyGroup</code>モデルのvalidationに使っていて、そのコードは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">with_options</span> <span class="ss">on</span><span class="p">:</span> <span class="o">[</span><span class="ss">:update</span><span class="o">]</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">validate</span> <span class="ss">:validate_relation_participants</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:group_id</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="k">unless</span><span class="p">:</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="n">owner</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Conceptor</span><span class="p">)</span> <span class="p">}</span> <span class="c1"># ここ</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:not_send_from</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'>  <span class="n">v</span><span class="o">.</span><span class="n">validates</span> <span class="ss">:not_send_to</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ここはProcを使わず<code>owner.is_a?(Conceptor)</code>だけ書くとエラーになるため、Procオブジェクトを使って値を渡している。<br/>
あとは<code>VisualizeLogicService</code>で使っている。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># 遷移パターンを表示する</span>
</span><span class='line'><span class="k">def</span> <span class="nf">visualize</span>
</span><span class='line'>  <span class="n">trees</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@tree</span><span class="o">.</span><span class="n">root_node</span><span class="o">.</span><span class="n">print_tree</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">node</span><span class="p">,</span> <span class="n">prefix</span><span class="o">|</span> <span class="n">trees</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">prefix</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">node</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">})</span> <span class="c1"># ここ</span>
</span><span class='line'>  <span class="n">trees</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードの中の<code>print_tree</code>は<code>rubytree gem</code>からrequireされて使っていて、深くは知らないけど、そのメソッドの引数を渡すためにlambdaを使っている。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブロック]]></title>
    <link href="http://jq-jo.github.io/blog/2018/01/24/block/"/>
    <updated>2018-01-24T19:13:49+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/01/24/block</id>
    <content type="html"><![CDATA[<ul>
<li><a href="https://jq-jo.github.io/blog/2017/12/27/block-proc-lambda/">Rubyのblock, Proc, Lambda</a></li>
<li><a href="https://jq-jo.github.io/blog/2018/01/24/scope/">ブロック①</a></li>
<li><a href="https://jq-jo.github.io/blog/2018/02/01/block/">ブロック②</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ブロック①]]></title>
    <link href="http://jq-jo.github.io/blog/2018/01/24/scope/"/>
    <updated>2018-01-24T19:11:25+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/01/24/scope</id>
    <content type="html"><![CDATA[<h2>スコープ</h2>

<h3>スコープとは</h3>

<p>スコープは範囲、またはエリアなどで定義できる。つまり、プログラミングでのスコープはどこまで参照できるかを決める範囲を指してスコープと呼ぶ。</p>

<h3>スコープの変更</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">v1</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="n">v2</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="nb">local_variables</span> <span class="c1"># =&gt; [:v2]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="n">v3</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>    <span class="nb">local_variables</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">local_variables</span> <span class="c1"># =&gt; [:v2]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="no">MyClass</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; [:v3]</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span> <span class="c1"># =&gt; [:v3]</span>
</span><span class='line'><span class="nb">local_variables</span> <span class="c1"># =&gt; [:v1, :obj]</span>
</span></code></pre></td></tr></table></div></figure>


<p>このスコープの移動を追っていると、<br/>
まず、<code>v1</code>が定義されたトップレベルのスコープだ。次に、<code>MyClass</code>が定義されたスコープだ。<br/>
Rubyの「内部スコープ」から「外部スコープ」を参照する「入れ子構造」が存在しないため、スコープはきちんと区別されている。新しいスコープに入ると、束縛も新しい束縛と交換される。なので、<code>my_method</code>が呼び出されるとさらに新しいスコープがオープンされて終わったらスコープは削除され、トップレベルのスコープに戻る。そこでまた<code>my_method</code>を呼び出すと新しいスコープをオープンして、新しい<code>v3</code>を定義する。（ここで定義された<code>v3</code>は先の<code>v3</code>とは関係ない）</p>

<h3>スコープゲート</h3>

<p>プログラムがスコープを切り替えて、新しいスコープをオープンする場所は３つある。</p>

<ul>
<li>クラス定義（class）</li>
<li>モジュール定義（module）</li>
<li>メソッド呼び出し（def）</li>
</ul>


<h3>スコープのフラット化</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_var</span> <span class="o">=</span> <span class="s2">&quot;Success&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span>
</span><span class='line'>  <span class="c1"># my_varを表示したい。。</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="c1"># my_varを表示したい！</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードでクラスとメソッドでトップレベルのロカール変数の<code>my_var</code>を使いたい場合、どうすればいいのか。今までの説明だったらスコープがそれぞれ違くて使えないけど。
さっき言った通り、スコープゲートは３つがある。<br/>
つまり、スコープゲート以外にはスコープ関係なくトップレベルのローカル変数を使えるということになるのだ。<br/>
<code>class</code>、<code>def</code>の代わりに<code>Class.new</code>、<code>define_method</code>を使えばクロージャで<code>my_var</code>を取得できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_var</span> <span class="o">=</span> <span class="s2">&quot;Success&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span> <span class="o">=</span> <span class="no">Class</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">my_var</span><span class="si">}</span><span class="s2"> はクラスの中で表示できる！&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:my_method</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">my_var</span><span class="si">}</span><span class="s2"> はメドッドの中で表示できる！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">MyClass</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Success</span> <span class="err">はクラスの中で表示できる！</span>
</span><span class='line'><span class="no">Success</span> <span class="err">はメドッドの中で表示できる！</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに書くと、無事出力される。</p>

<h3>気になる点</h3>

<p>そうしたら<code>define_method</code>にブロックを渡したらどうなるだろう。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">define_method</span> <span class="ss">:my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;hello!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; LocalJumpError: no block given (yield)</span>
</span></code></pre></td></tr></table></div></figure>


<p>エラーになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;hello!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="n">hello!</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>def</code>でメソッドを定義する時は問題なく動く。<br/>
<code>define_method</code>でブロックが使える方法とは何があるのかな。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_lambda</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;hello!&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">define_method</span> <span class="ss">:my_method</span><span class="p">,</span> <span class="n">my_lambda</span>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="n">hello!</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">my_proc</span> <span class="o">=</span> <span class="nb">proc</span><span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;hello!&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">define_method</span> <span class="ss">:my_method</span><span class="p">,</span> <span class="n">my_proc</span>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="n">hello!</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>lambda</code>と<code>proc</code>を使うと<code>define_method</code>にブロックを渡せる。</p>

<h2>まとめ</h2>

<ul>
<li>どこまで参照できるかを決める範囲をスコープと呼ぶ</li>
<li>スコープはきちんと区別されている。新しいスコープに入ると、束縛も新しい束縛と交換される</li>
<li>スコープゲートは３つがある

<ul>
<li>クラス定義（class）</li>
<li>モジュール定義（module）</li>
<li>メソッド呼び出し（def）</li>
</ul>
</li>
<li><code>class</code>、<code>def</code>の代わりに<code>Class.new</code>、<code>define_method</code>を使えばスコープのフラット化ができる</li>
<li><code>define_method</code>にもブロックが渡せる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[メソッド]]></title>
    <link href="http://jq-jo.github.io/blog/2018/01/17/method/"/>
    <updated>2018-01-17T19:40:19+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/01/17/method</id>
    <content type="html"><![CDATA[<h2>動的メソッド</h2>

<h4>メソッドを呼び出す方法</h4>

<ul>
<li>ドットを使う</li>
<li>send()を使う

<ul>
<li>send()メソッドの第一引数は呼び出すメソッド名 => 文字列またはシンボル</li>
<li>その他の引数はそのままメソッドに渡される</li>
</ul>
</li>
</ul>


<p>send()を使えばコードの実行時に呼び出すメソッドを直前に決められる。なので動的な処理が可能になる。これを<code>動的ディスバッチ</code>と呼ぶ。</p>

<h4>プライバシー問題</h4>

<p>send()メソッドの問題は<code>private</code>メソッドも呼ばれるということだ。</p>

<ul>
<li>例</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;called private method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">private_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">NoMethodError</span><span class="p">:</span> <span class="kp">private</span> <span class="nb">method</span> <span class="s1">&#39;private_method&#39;</span> <span class="n">called</span> <span class="k">for</span> <span class="c1">#&lt;C:0x007f8149e5c8e8&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:private_method</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;called private method&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>プライバシーの尊重のため、<code>public_send()</code>を使う方法もある。</p>

<ul>
<li>例２</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;called public method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;called private method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="ss">:public_method</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;called public method&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_send</span><span class="p">(</span><span class="ss">:private_method</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="ss">NoMethodError</span><span class="p">:</span> <span class="kp">private</span> <span class="nb">method</span> <span class="s1">&#39;private_method&#39;</span> <span class="n">called</span> <span class="k">for</span> <span class="c1">#&lt;C:0x007f8149e5c8e8&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>メソッドを動的に定義</h4>

<ul>
<li>define_method()</li>
</ul>


<p>Module#define_method()を使えば、メソッドをその場で定義できる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="n">define_method</span> <span class="ss">:my_method</span> <span class="k">do</span> <span class="o">|</span><span class="n">my_arg</span><span class="o">|</span>
</span><span class='line'>    <span class="n">my_arg</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">obj</span> <span class="o">=</span> <span class="n">C</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">obj</span><span class="o">.</span><span class="n">my_method</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>define_method</code>はClassの中で実行され、<code>my_method()</code>が<code>C</code>クラスのインスタンスメソッドとして定義される。実行時にメソッドを定義するこの技術を<code>動的メソッド</code>と呼ぶ。</p>

<h2>method_missing()</h2>

<h4>method_missing()のオーバーライド</h4>

<p><code>method_missing()</code>メソッドは<code>BasicObject</code>のインスタンスメソッドだ。つまり、<code>BasicObject</code>を継承している<code>Object</code>を継承するオブジェクトは<code>method_missing()</code>を持っているということになり、もちろんオーバーライドもでき、存在しないメソッドに対するハンドリングもできるということだ。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)を呼びました&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;(ブロックを渡した)&quot;</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">hello</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="err">を呼びました</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">hello</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">hello</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="err">を呼びました</span>
</span><span class='line'><span class="p">(</span><span class="err">ブロックを渡した</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h4>ゴーストメソッド</h4>

<p>同じようなメソッドをたくさん定義しなければならないとき、いちいち定義するより、method_missing()を呼び出す方がもっと楽かもしれない。method_missing()での処理は呼び出し側からは通常の呼び出しのように見える。しかし、レシーバに対応するメソッドは見当たらない。これは<code>ゴーストメソッド</code>と呼ぶ。上記の例では<code>hello()</code>がゴーストメソッドなるのだ。</p>

<h2>もっとmethod_missing()</h2>

<h4>メソッド名が衝突したら</h4>

<ul>
<li>例</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)を呼びました&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;(ブロックを渡した)&quot;</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="ss">ArgumentError</span><span class="p">:</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="n">given</span> <span class="mi">2</span><span class="p">,</span> <span class="n">expected</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記のコードでは</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">display</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="err">を呼びました</span>
</span><span class='line'><span class="p">(</span><span class="err">ブロックを渡した</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>とプリントされると予想したけど、プリントされず<code>ArgumentError</code>になってしまった。<br/>
これの問題は<code>Object</code>から継承されたメソッドの中で<code>display</code>というメソッドがあり、<code>method_missing()</code>が呼ばれなかったからだ。<br/>
これはは必要ないメソッドを全部削除することで対応できる。メソッドをすべて削除することを<code>ブランクスレート</code>と呼ぶ。</p>

<ul>
<li>例２</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="nb">instance_methods</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
</span><span class='line'>    <span class="n">undef_method</span> <span class="n">m</span> <span class="k">unless</span> <span class="n">m</span><span class="o">.</span><span class="n">to_s</span> <span class="o">=~</span> <span class="sr">/__|method_missing/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">method_missing</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">method</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">)を呼びました&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;(ブロックを渡した)&quot;</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">display</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="c1"># block</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">display</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span><span class="err">を呼びました</span>
</span><span class='line'><span class="p">(</span><span class="err">ブロックを渡した</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードは予想通り<code>method_missing()</code>を呼び出すことができる。</p>

<h2>まとめ</h2>

<ul>
<li>メソッドは<code>send()</code>でも呼び出せる</li>
<li><code>send()</code>は<code>private</code>メソッドも呼び出せるため、<code>public_send()</code>を使うこともできる</li>
<li><code>define_method()</code>でメソッドを動的に定義できる</li>
<li><code>method_missing()</code>を利用すると存在しないメソッド、ゴーストメソッドに対するハンドリングや処理ができる</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[オブジェクトモデル]]></title>
    <link href="http://jq-jo.github.io/blog/2018/01/11/object-model/"/>
    <updated>2018-01-11T12:02:58+09:00</updated>
    <id>http://jq-jo.github.io/blog/2018/01/11/object-model</id>
    <content type="html"><![CDATA[<h2>オープンクラス</h2>

<p>下記のメソッドは文字列からアルファベットとスペース以外を取り除くメソッド</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">to_alphanumeric</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>  <span class="n">s</span><span class="o">.</span><span class="n">gsub</span> <span class="sr">/[^\w\s]/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>オープンクラスを使えば、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">to_alphanumeric</span>
</span><span class='line'>    <span class="nb">gsub</span> <span class="sr">/[^\w\s]/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>こう書くこともできる。<br/>
標準クラスの<code>String</code>を書き換える。すると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;!a #b+c&quot;</span><span class="o">.</span><span class="n">to_alphanumeric</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;a bc&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに適用される。</p>

<h2>クラス定義</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;my_method&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method2</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;my_method2&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>class C</code>を定義してまた<code>class C</code>をさらに定義するとどうなるだろう。<br/>
<code>class C</code>を上書きすると思ったが実際叩いてみたら</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span>
</span><span class='line'><span class="n">my_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method2</span>
</span><span class='line'><span class="n">my_method2</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<p>上書きじゃなく、<code>class C</code>に追加する形になる。</p>

<h2>定数</h2>

<p>定数はディレクトリとファイルのようにパスで呼び出すことができる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">M</span>
</span><span class='line'>  <span class="no">MyConstant</span> <span class="o">=</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>    <span class="no">MyConstant</span> <span class="o">=</span> <span class="s2">&quot;12345&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">::</span><span class="no">MyConstant</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">M</span><span class="o">::</span><span class="n">C</span><span class="o">::</span><span class="no">MyConstant</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;12345&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>クラスオブジェクト</h2>

<p>クラスオブジェクトをみてみるため、<code>"hello"</code>からたどり着いてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;hello&quot;</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Class</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">instance_methods</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:allocate</span><span class="p">,</span> <span class="ss">:new</span><span class="p">,</span> <span class="ss">:superclass</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">String</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Object</span>
</span><span class='line'>
</span><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">BasicObject</span>
</span><span class='line'>
</span><span class='line'><span class="no">BasicObject</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="no">Class</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Module</span>
</span><span class='line'>
</span><span class='line'><span class="no">Module</span><span class="o">.</span><span class="n">superclass</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Object</span>
</span></code></pre></td></tr></table></div></figure>


<p>そうなんだ！と思いながら１つ気になる点がある。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Object</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="no">Class</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Object</code>の<code>class</code>は<code>Class</code>。<br/>
でも、<code>Class</code>の<code>superclass</code>は<code>module</code>であり、<code>module</code>の<code>superclass</code>は<code>Object</code>。<br/>
では<code>Class</code>の上位classの<code>Object</code>は<code>Class</code>？
ちゃんと理解ができていない。。これは今度深く調べてみよう。</p>

<h2>self</h2>

<h4>class定義の時のself</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="nb">self</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">C</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">my_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;CC:0x007ffbe8a67e08&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>method</code>内での<code>self</code>はオブジェクトを指す。<code>method</code>外での<code>self</code>はクラスを指す。</p>

<h4>privateキーワードのself</h4>

<p>privateメソッドのルール：「明示的なレシーバーをつけて呼び出せない」
下記は明示的なselfをつけているのでエラーとなる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method</span>
</span><span class='line'><span class="ss">NoMethodError</span><span class="p">:</span> <span class="kp">private</span> <span class="nb">method</span> <span class="sb">`private_method&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>selfを削除すると動作するようになる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">C</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">public_method</span>
</span><span class='line'>    <span class="n">private_method</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">private_method</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;ABCDE&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">C</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">public_method</span>
</span><span class='line'>
</span><span class='line'><span class="no">ABCDE</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">nil</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p>本「メタプログラミングRuby」第1章</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyのblock, Proc, Lambda]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/27/block-proc-lambda/"/>
    <updated>2017-12-27T10:50:28+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/27/block-proc-lambda</id>
    <content type="html"><![CDATA[<h2>ブロック</h2>

<h3>ブロックとは</h3>

<ul>
<li>do~endまたは{~}で囲われた引数となるためのもの</li>
<li>それ単体では存在できず、メソッドの引数にしかなれない</li>
<li>引数として渡されたブロックは、yieldによって実行される</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>説明</h4>

<ul>
<li>引数を明示</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">block</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>「&amp;」とは<br/>
<code>&amp;</code>を付けることで、実際に引数にブロックが渡ってきた際、<br/>
Procオブジェクトに変換している。</p></li>
<li><p>Procオブジェクトとは</p>

<ul>
<li>ブロックをオブジェクト化したものがProc

<ul>
<li>ブロックをオブジェクトに変換することで、引き渡されたメソッド内で扱えるようにする</li>
</ul>
</li>
<li>Procオブジェクトは、callで呼び出すことが出来る</li>
</ul>
</li>
<li><p>注意点<br/>
引数として渡せるブロックは一つだけ。</p></li>
<li><p>yieldが使える<br/>
引数として渡されるブロックが１つに限られているならば、呼び出し箇所を<code>block.call</code>と明示せずに、yieldで統一する。</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#メソッド定義</span>
</span><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>さらに、<br/>
<code>yield</code>を使うなら引数の<code>(&amp;block)</code>はいらないので</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span>
</span><span class='line'>  <span class="k">yield</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, block!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうに省略できる。</p>

<h2>Proc</h2>

<ul>
<li>ブロックをオブジェクト化したものがProc</li>
<li>Procオブジェクトはcallで呼び出すことが出来る</li>
<li>Procに引数を持つこともできる</li>
<li>Proc.newとlambdaはほぼ同義</li>
</ul>


<h3>Procオブジェクトの定義と呼び出し</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hoge&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procに引数が渡された場合</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2">!&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;Proc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, Proc!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Proc.newとlambdaはほぼ同義</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lambda1</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="nb">p</span> <span class="s2">&quot;hoge&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lambda1</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hoge&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda2</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;Hello, </span><span class="si">#{</span><span class="n">s</span><span class="si">}</span><span class="s2">!&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lambda2</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="s2">&quot;Proc&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Hello, Proc!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Procとlambdaの違い</h3>

<ul>
<li>lambdaはブロックの引数の数が違うとエラーを起こしてくれる。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="kp">nil</span>
</span><span class='line'>
</span><span class='line'><span class="n">lambda1</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="o">|</span> <span class="nb">p</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">,</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="n">lambda1</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="n">wrong</span> <span class="n">number</span> <span class="n">of</span> <span class="n">arguments</span> <span class="p">(</span><span class="mi">2</span> <span class="k">for</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="no">ArgumentError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>明示的にreturnやbreakを行った場合の挙動が違います。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method_proc</span>
</span><span class='line'>  <span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">p</span> <span class="s2">&quot;proc&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;method_proc&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">method_proc</span>
</span><span class='line'><span class="o">=&gt;</span><span class="s2">&quot;proc&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">method_lambda</span>
</span><span class='line'>  <span class="nb">lambda</span> <span class="o">=</span> <span class="nb">lambda</span><span class="p">{</span> <span class="k">return</span> <span class="nb">p</span> <span class="s2">&quot;lambda&quot;</span><span class="p">}</span>
</span><span class='line'>  <span class="nb">lambda</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'>  <span class="nb">p</span> <span class="s2">&quot;method_lambda&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">method_lambda</span>
</span><span class='line'><span class="o">=&gt;</span><span class="s2">&quot;lambda&quot;</span>
</span><span class='line'>  <span class="s2">&quot;method_lambda&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ブロックやProcのメリット</h2>

<h3>柔軟に拡張できる</h3>

<p>下のコードのようにメソッドを汎用的に使うことができる</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">someProc</span><span class="p">)</span>
</span><span class='line'>  <span class="n">someProc</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">input</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">sum_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">sum_proc</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">string_proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">string</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">string</span> <span class="o">*</span> <span class="n">x</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">my_method</span><span class="p">(</span><span class="s1">&#39;hello_proc! &#39;</span><span class="p">,</span> <span class="n">string_proc</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello_proc! hello_proc! hello_proc! hello_proc! hello_proc! &quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>クロージャとしての機能が得られる</h3>

<h4>サンプル①</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">bar</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;bye&#39;</span>
</span><span class='line'>  <span class="k">yield</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span><span class='line'><span class="n">bar</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello, Jo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>サンプル②</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="n">foo</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="nb">proc</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">3</span>
</span><span class='line'><span class="nb">proc</span><span class="o">.</span><span class="n">call</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">4</span>
</span></code></pre></td></tr></table></div></figure>


<h3>block_given?</h3>

<h4>block_given?とは</h4>

<p>引数としてブロックが与えられたかどうかを判別するメソッド。</p>

<h4>使い方</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">greet_method</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="k">yield</span><span class="p">(</span><span class="s1">&#39;hello!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">p</span> <span class="s2">&quot;ブロックがありません。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">greet_method</span> <span class="k">do</span> <span class="o">|</span><span class="n">str</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">p</span> <span class="n">str</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;hello!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">greet_method</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;ブロックがありません。&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="https://qiita.com/kidach1/items/15cfee9ec66804c3afd2">https://qiita.com/kidach1/items/15cfee9ec66804c3afd2</a><br/>
<a href="https://qiita.com/ryo-ma/items/24c46592b45775e8644d">https://qiita.com/ryo-ma/items/24c46592b45775e8644d</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Active Storage]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/25/active-storage/"/>
    <updated>2017-12-25T10:49:14+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/25/active-storage</id>
    <content type="html"><![CDATA[<p>Rails5.2の新しい機能の中に<code>Active Storage</code>というものが気になったので使ってみた。</p>

<h2>Active Storageとは</h2>

<p>AWS S3やGoogle Cloud Storageなどのクラウドファイルストレージサービスへのアップロードをシンプルにやってくれる仕組みとのこと。<br/>
もちろん物理的なディスクシステムへ保存することもできるけど、主眼はあくまでクラウドサービスに置いているらしい。</p>

<h2>Modelの仕組</h2>

<p>Active Storageをインストールすると<code>active_storage_blobs</code>,<code>active_storage_attachments</code>が生成される。</p>

<p><code>active_storage_blobs</code>は<code>metadata (filename, content-type, etc.)</code>を保存する<code>table</code>になっている。<code>key</code>カラムは<code>identifier key</code>としてクラウドファイルストレージのアップするファイルのfilenameになる。</p>

<p><img src="https://monosnap.com/file/xyt2cDYuvKTA8VzYhA6XzqTwcN8Nwh.png" style="width: 50%;">
<img src="https://monosnap.com/file/kNPH6J23jIHAywqUdjDYRHfp7V86iB.png" style="width: 50%;"></p>

<p><code>active_storage_attachments</code>は添付ファイルの親モデルと<code>active_storage_blobs</code>をアソシエートしてくれる。親モデルはpolymorphicになる。<br/>
<img src="https://monosnap.com/file/YOHUlhsSpV1Nt5COr0YZX4RdI7KXD4.png" style="width: 50%;"></p>

<h2>使い方</h2>

<ul>
<li>環境

<ul>
<li>Rails 5.2.0.beta2</li>
<li>ruby 2.4.1p111</li>
</ul>
</li>
</ul>


<h3>インストール</h3>

<p><code>rails new</code>を通してプロジェクトを作成するとき自動的に<code>Active Storage</code>がインストールされる。<br/>
<code>rails new --skip-active-storage</code>にするとインストールせずにプロジェクトを作成できる。</p>

<p>既存プロジェクトに<code>Active Storage</code>を入れたい場合は、まず<code>Rails</code>のバージョンをアップグレードしてから、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails active_storage:install
</span><span class='line'>bundle exec rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>で入れることができる。</p>

<h3>サンプルコード</h3>

<ul>
<li>gemfile</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;mini_magick&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.8&#39;</span> <span class="c1"># 画像の加工のために</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk-s3&#39;</span> <span class="c1"># S3へのアップロード</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>model</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
</span><span class='line'>  <span class="n">has_one_attached</span> <span class="ss">:avatar</span> <span class="c1"># has_oneの場合</span>
</span><span class='line'>  <span class="n">has_many_attached</span> <span class="ss">:images</span> <span class="c1"># has_manyの場合</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>controller</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:new</span> <span class="ow">and</span> <span class="k">return</span> <span class="k">unless</span> <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">avatar</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:avatar</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">avatar</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">images</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:images</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="vi">@user</span><span class="o">.</span><span class="n">images</span><span class="o">.</span><span class="n">attach</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">users_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>view</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">=</span> <span class="n">form_for</span> <span class="vi">@user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:avatar</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:images</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">file_field</span> <span class="ss">:images</span><span class="p">,</span> <span class="ss">multiple</span><span class="p">:</span> <span class="kp">true</span> <span class="c1"># has_manyの場合</span>
</span><span class='line'>  <span class="nt">br</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s2">&quot;作成&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>クラウド設定</h4>

<ul>
<li>config/environments/development.rb</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Store uploaded files on the local file system (see config/storage.yml for options)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_storage</span><span class="o">.</span><span class="n">service</span> <span class="o">=</span> <span class="ss">:amazon</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>config/storage.yml</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Use rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)</span>
</span><span class='line'><span class="l-Scalar-Plain">amazon</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">service</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">S3</span>
</span><span class='line'>  <span class="l-Scalar-Plain">access_key_id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_ACCESS_KEY&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">secret_access_key</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_SECRET_KEY&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">region</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_REGION&#39;] %&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">bucket</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;AWS_BUCKET&#39;] %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>リサイズ</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='slim'><span class='line'><span class="p">=</span> <span class="n">image_tag</span> <span class="vi">@user</span><span class="o">.</span><span class="n">avatar</span><span class="o">.</span><span class="n">variant</span><span class="p">(</span><span class="ss">resize</span><span class="p">:</span> <span class="s1">&#39;200x200&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このように<code>variant</code>メソッドを使えばリサイズでビューに表示できる。<br/>
<small>
参照：<a href="https://github.com/rails/rails/blob/master/activestorage/app/models/active_storage/variant.rb">https://github.com/rails/rails/blob/master/activestorage/app/models/active_storage/variant.rb</a>
</small></p>

<h4>Direct upload</h4>

<p>JSを使って<code>Direct upload</code>することもできる。</p>

<ul>
<li><p>include activestorage.js</p>

<ul>
<li>asset pipelineの場合</li>
</ul>


<pre><code class="javascript">//= require activestorage
</code></pre>

<ul>
<li>npm packageの場合</li>
</ul>


<pre><code class="javascript">import * as ActiveStorage from "activestorage"
ActiveStorage.start()
</code></pre></li>
<li><p>file_fieldに設定</p>

<ul>
<li>ビューの file_field に direct_upload: true を入れる</li>
</ul>


<pre><code class="slim">= f.file_field :avatar, direct_upload: true
</code></pre></li>
</ul>


<h2>サンプル</h2>

<p><a href="https://active-storage-jo.herokuapp.com">https://active-storage-jo.herokuapp.com</a></p>

<h2>参考</h2>

<p><a href="https://qiita.com/nashirox/items/e63fd28d974ecf12f0e7">https://qiita.com/nashirox/items/e63fd28d974ecf12f0e7</a><br/>
<a href="https://github.com/rails/rails/tree/master/activestorage">https://github.com/rails/rails/tree/master/activestorage</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyにおけるObserverパターン]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/19/observer-pattern-by-ruby/"/>
    <updated>2017-12-19T18:45:15+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/19/observer-pattern-by-ruby</id>
    <content type="html"><![CDATA[<h2>Observerパターン</h2>

<h3>サンプル①</h3>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payroll</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために小切手を切ります！&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;彼の給料はいま</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">です！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:salary</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">payroll</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>    <span class="vi">@payroll</span> <span class="o">=</span> <span class="n">payroll</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="vi">@payroll</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="n">payroll</span><span class="p">)</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">35000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">35000</span><span class="err">です！</span>
</span></code></pre></td></tr></table></div></figure>


<p>これは<code>Payroll</code>の<code>update</code>だけ指定されていて汎用的ではない。</p>

<h3>サンプル②</h3>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payroll</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために小切手を切ります！&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;彼の給料はいま</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">です！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:salary</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">payroll</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span><span class="o">=</span><span class="mi">35000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">35000</span><span class="err">です！</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードに新しいクラスを出してそのクラスも適用してみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">TaxMan</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">に新しい税金の請求書を送ります！&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tax_man</span> <span class="o">=</span> <span class="no">TaxMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">tax_man</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">90000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">90000</span><span class="err">です！</span>
</span><span class='line'><span class="no">Jo</span><span class="err">に新しい税金の請求書を送ります！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプル③（モジュール化）</h3>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Subject</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:salary</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">tax_man</span> <span class="o">=</span> <span class="no">TaxMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">payroll</span><span class="p">)</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span><span class="p">(</span><span class="n">tax_man</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">90000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">90000</span><span class="err">です！</span>
</span><span class='line'><span class="no">Jo</span><span class="err">に新しい税金の請求書を送ります！</span>
</span></code></pre></td></tr></table></div></figure>


<h3>サンプル④（コードブロック）</h3>

<p>Rubyで<code>Observable</code>というライブラリを提供してくれるけど、<code>Observable</code>はコードブロックをサポートしてくれない。<br/>
次のコードはコードブロックに対する対応になる。</p>

<h4>コード</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Subject</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">add_observer</span><span class="p">(</span><span class="o">&amp;</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span> <span class="o">&lt;&lt;</span> <span class="n">observer</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">delete_observer</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify_observers</span>
</span><span class='line'>    <span class="vi">@observers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">observer</span><span class="o">|</span>
</span><span class='line'>      <span class="n">observer</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Subject</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:salary</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="k">super</span><span class="p">()</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">notify_observers</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="mi">30000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">add_observer</span> <span class="k">do</span> <span class="o">|</span><span class="n">changed_employee</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために小切手を切ります！&quot;</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;彼の給料はいま</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">です！&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">90000</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">のために小切手を切ります！</span>
</span><span class='line'><span class="err">彼の給料はいま</span><span class="mi">90000</span><span class="err">です！</span>
</span></code></pre></td></tr></table></div></figure>


<h2>RailsのActiveRecord::Observer</h2>

<p>Railsでは<code>ActiveRecord::Observer</code>を提供している。<br/>
<code>rails-observers</code>という<code>Gem</code>を通して使用できる。</p>

<h3>インストール</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-observers&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">gem</span> <span class="n">install</span> <span class="n">rails</span><span class="o">-</span><span class="n">observers</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<p><code>name</code>カラムを持っている<code>User</code>というモデルがあるとしてこの<code>User</code>モデルに対する<code>Observer</code>を作成してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rails</span> <span class="n">g</span> <span class="n">observer</span> <span class="n">user</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると、<code>app/models/user_observer.rb</code>というルートで生成される。<br/>
そのファイルにクラスを定義する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserObserver</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_save</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">が保存されました。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>あと、<code>application.rb</code>に設定する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">observers</span> <span class="o">=</span> <span class="ss">:user_observer</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>observer</code>が複数の場合、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">observers</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:user_observer</span><span class="p">,</span> <span class="ss">:team_observer</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>のようにもできる。</p>

<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s1">&#39;Jo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt;</span>
</span><span class='line'><span class="no">Jo</span><span class="err">が保存されました。</span>
</span></code></pre></td></tr></table></div></figure>


<h3>その他</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">NotificationsObserver</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>  <span class="n">observe</span> <span class="ss">:comment</span><span class="p">,</span> <span class="ss">:like</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">record</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># notifiy users of new comment or like</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>observe</code>を指定すると指定されたモデルのみ<code>observe</code>することもできる。</p>

<h2>終わり</h2>

<p>RubyのObserverパターンと<code>ActiveRecord::Observer</code>を調べながら<br/>
Railsで提供しているライブラリ<code>ActiveRecord::Callbacks</code>と少し似ていると思った。</p>

<h2>参考</h2>

<p>本 - Rubyによるデザインパターン<br/>
<a href="https://github.com/rails/rails-observers">https://github.com/rails/rails-observers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PubSubとObserver]]></title>
    <link href="http://jq-jo.github.io/blog/2017/12/06/pubsub-and-observer-in-rails/"/>
    <updated>2017-12-06T15:22:06+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/12/06/pubsub-and-observer-in-rails</id>
    <content type="html"><![CDATA[<h2>PubSub</h2>

<h3>PubSubとは</h3>

<blockquote><p>出版-購読型モデル（しゅっぱん-こうどくがたモデル、英: Publish/subscribe）は、非同期メッセージングパラダイムの一種であり、メッセージの送信者（出版側）が特定の受信者（購読側）を想定せずにメッセージを送るようプログラムされたものである。出版されたメッセージにはクラス分けされ、購読者に関する知識を持たない。購読側は興味のあるクラスを指定しておき、そのクラスに属するメッセージだけを受け取り、出版者についての知識を持たない。出版側と購読側の結合度が低いため、スケーラビリティがよく、動的なネットワーク構成に対応可能である。</p></blockquote>

<p>参照：<a href="https://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB">出版-購読型モデル（ウィキペディア）</a></p>

<h3>利点</h3>

<p>出版側と購読側は疎結合されており、相手の存在を知る必要もない。トピックに関して通信さえできれば、両者はシステムのネットワーク構成も知る必要がない。また、相手の状態がどうであろうと個々のシステムは正常に稼動し続ける。一般的な密結合のクライアントサーバモデルでは、クライアントはサーバ上でサーバプロセスが動作していないときはメッセージを送ることが出来ないし、サーバはクライアントが動作していないときはメッセージを受け取れない。出版-購読型モデルでは、出版側と購読側を位置的に分離すると同時に、時間的にも分離する。出版-購読型システムの戦略として、出版側がダウンしていても、バックログを使って購読側が動作し続けるようにできる（帯域幅調整の一種）。</p>

<h3>欠点</h3>

<p>ブローカー（サーバ）を使った出版-購読型システムでは、購読側がブローカーに対してメッセージ送信を要求するのは帯域内で行われ、セキュリティ問題が発生する可能性がある。ブローカーを騙して間違ったクライアントにメッセージを送らせたり、クライアントがサービスを受けられないようにすることが考えられる。購読の正当性を検証するようにした場合、ブローカーが過負荷に陥る可能性もある。ブローカーを使わないシステムでも、購読側が認証されていないメッセージを受信する可能性がある。認証されていない出版側は不正で損害を与えるようなメッセージをシステム内に送り込む可能性がある。これはシステムがブロードキャストやマルチキャストを使っているために発生する。このような不正アクセスに対する防御策としては、今のところ暗号化（SSL/TLSなど）しかない。</p>

<h3>RailsのPubSub</h3>

<p>Railsでは前記事を書いてた<a href="https://jq-jo.github.io/blog/2017/03/02/rails5-action-cable/">ActionCable</a>がPubSubモデルを利用して使われている。<br/>
<code>RailsGuide（日本語版）</code>にはこう書いてある。</p>

<blockquote><p>Action Cableは、 WebSocketとRailsのその他の部分をシームレスに統合するためのものです。Action Cable が導入されたことで、Rails アプリケーションの効率の良さとスケーラビリティを損なわずに、通常のRailsアプリケーションと同じスタイル・方法でリアルタイム機能をRubyで記述できます。クライアント側のJavaScriptフレームワークとサーバー側のRubyフレームワークを同時に提供する、フルスタックのフレームワークです。Active RecordなどのORMで書かれたすべてのドメインモデルにアクセスできます。</p>

<p>Pub/Subは出版-購読型モデルとも呼ばれる、メッセージキューのパラダイムです。出版側（Publisher）が、購読側（Subscriber）の抽象クラスに情報を送信します。 このとき、個別の受信者を指定しません。Action Cableでは、このアプローチを採用してサーバーと多数のクライアント間で通信を行います。</p></blockquote>

<p>参照：<a href="https://railsguides.jp/action_cable_overview.html">RailsGuide（日本語版）</a></p>

<h2>Observer</h2>

<h3>Observerパターンとは</h3>

<p>ウィキペディアにはObserverパターンに対してこう書いてある。</p>

<blockquote><p>Observer パターン（オブザーバ・パターン）とは、プログラム内のオブジェクトの状態を観察（英: observe）するようなプログラムで使われるデザインパターンの一種。出版-購読型モデルとも呼ばれる。暗黙的呼び出しの原則と関係が深い。</p>

<p>分散イベント処理システムの実装に主に使われる。言語によっては、このパターンで扱われる問題は言語が持つイベント処理構文で処理される。リアルタイムのアプリケーション配置の手段として興味深い機能である。</p></blockquote>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/e/e2/Observer-pattern-class-diagram.png" alt="" /></p>

<p>参考：<a href="https://ja.wikipedia.org/wiki/Observer_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Observer パターン（ウィキペディア）</a></p>

<p>つまり、出版者（Subject）に対して購読者（Observer）は監視するし、出版者に何かの変更があればそれに対する処理を行うということになる。</p>

<h3>RailsのObserverパターン</h3>

<p>Rubyには<code>observable</code>というModuleがあって監視できるようになっている。</p>

<h4>サンプルコード</h4>

<ul>
<li>Employee(サブジェクト)：従業員を表す</li>
<li>Payroll(オブザーバ1)：給与の小切手の発行を行う</li>
<li>TaxMan(オブザーバ2)：税金の請求書の発行を行う</li>
</ul>


<p>まずは従業員を表すEmployeeクラスは、name, title, salaryといったデータと、salaryの変更を受け付けるメソッドを持っている。
さらに、Employeeクラスに<code>observable</code>を<code>include</code>する。
<code>observable</code>で用いるメソッドは次のとなる。</p>

<ul>
<li><code>add_observer</code>メソッドで通知する先のオブジェクトを追加</li>
<li><code>changed</code>メソッドと<code>notify_observers</code>メソッドでオブジェクトに通知</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;observer&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Employee</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Observable</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:salary</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span>   <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="vi">@title</span>  <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">salary</span>
</span><span class='line'>    <span class="n">payroll</span> <span class="o">=</span> <span class="no">Payroll</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">taxman</span>  <span class="o">=</span> <span class="no">TaxMan</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="n">add_observer</span><span class="p">(</span><span class="n">payroll</span><span class="p">)</span>
</span><span class='line'>    <span class="n">add_observer</span><span class="p">(</span><span class="n">taxman</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">salary</span><span class="o">=</span><span class="p">(</span><span class="n">new_salary</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@salary</span> <span class="o">=</span> <span class="n">new_salary</span>
</span><span class='line'>    <span class="n">changed</span>
</span><span class='line'>    <span class="n">notify_observers</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に給与の小切手の発行を行うPayrollクラスと、税金の請求書の発行を行うTaxManクラスを作成する。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Payroll</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;彼の給料は</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">salary</span><span class="si">}</span><span class="s2">になりました！</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">のために新しい小切手を切ります。&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TaxMan</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">changed_employee</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">changed_employee</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">に新しい税金の請求書を送ります&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>コードはここまでになるので、コンソールで確認してみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jo</span> <span class="o">=</span> <span class="no">Employee</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;Jo&#39;</span><span class="p">,</span> <span class="s1">&#39;System Team member&#39;</span><span class="p">,</span> <span class="mi">5000</span><span class="p">)</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">6000</span>
</span><span class='line'><span class="c1">#=&gt; 彼の給料は6000になりました！Joのために新しい小切手を切ります。</span>
</span><span class='line'><span class="c1">#=&gt; Joに新しい税金の請求書を送ります</span>
</span><span class='line'><span class="n">jo</span><span class="o">.</span><span class="n">salary</span> <span class="o">=</span> <span class="mi">7000</span>
</span><span class='line'><span class="c1">#=&gt; 彼の給料は7000になりました！Joのために新しい小切手を切ります。</span>
</span><span class='line'><span class="c1">#=&gt; Joに新しい税金の請求書を送ります</span>
</span></code></pre></td></tr></table></div></figure>


<p>こういうふうにRubyでObserverの機能を使える。</p>

<h2>参照</h2>

<p><a href="https://ja.wikipedia.org/wiki/%E5%87%BA%E7%89%88-%E8%B3%BC%E8%AA%AD%E5%9E%8B%E3%83%A2%E3%83%87%E3%83%AB">出版-購読型モデル（ウィキペディア）</a><br/>
<a href="https://ja.wikipedia.org/wiki/Observer_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Observer パターン（ウィキペディア）</a><br/>
<a href="https://railsguides.jp/action_cable_overview.html">RailsGuide（日本語版）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PubSubHubbub]]></title>
    <link href="http://jq-jo.github.io/blog/2017/11/29/pubsubhubbub/"/>
    <updated>2017-11-29T13:42:07+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/11/29/pubsubhubbub</id>
    <content type="html"><![CDATA[<h2>PubSubHubbubとは</h2>

<blockquote><p>PubSubHubbub (パブサブハブバブ) とは、更新情報を Google にリアルタイムで通知することができるプロトコルです。略して、PuSH (プッシュ) とも呼ばれます。Pub は Publisher (配信)、Sub は Subscriber (購読) を意味しており、その間に Hub というサービス (中間サーバ) があるため、このような名前になっています。配信側がコンテンツを更新すると、Hub が購読側に通知を行います。購読側は更新情報をすぐに知ることができるため、リアルタイムの情報配信が実現できる仕組みになっています。</p></blockquote>

<p>参照 - <a href="https://murashun.jp/blog/20150915-01.html">https://murashun.jp/blog/20150915-01.html</a></p>

<h2>PubSubHubbubにリクエストを送る方法</h2>

<p>PubSubHubbubにリクエストを送る場合は、下記のURLにPOSTでリクエストを送る。</p>

<p><strong> <a href="http://pubsubhubbub.appspot.com/">http://pubsubhubbub.appspot.com/</a> </strong></p>

<p>リクエストを送る場合、dataとして<code>hub.mode</code>に<code>publish</code>を設定し、<code>hub.url</code>に<code>フィードのURL</code>を設定する。また、<code>Content-Type</code>には<code>application/x-www-form-urlencoded</code>を設定する。</p>

<h2>PubSubHubbub対応に使えるGems</h2>

<ul>
<li><a href="https://github.com/igrigorik/PubSubHubbub">igrigorik/PubSubHubbub</a></li>
<li><a href="https://github.com/Gargron/pubsubhubbub">Gargron/pubsubhubbub</a></li>
<li><a href="https://github.com/shiro16/nagareboshi">shiro16/nagareboshi</a></li>
</ul>


<p>とりあえずgithubのstarsが<code>igrigorik/PubSubHubbub</code>の方が多かったのでこれの使い方を少しみてみる。<br/>
- Simple client example</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">EventMachine</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pub</span> <span class="o">=</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">PubSubHubbub</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://pubsubhubbub.appspot.com/publish&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">publish</span> <span class="s2">&quot;http://www.test.com/&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">callback</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Successfully notified hub.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">errback</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Uh oh, something broke: </span><span class="si">#{</span><span class="n">pub</span><span class="o">.</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Posting multiple URL&rsquo;s</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">EventMachine</span><span class="o">.</span><span class="n">run</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">feeds</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;http://www.test.com&quot;</span><span class="p">,</span> <span class="s2">&quot;http://www.test.com/2&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">pub</span> <span class="o">=</span> <span class="no">EventMachine</span><span class="o">::</span><span class="no">PubSubHubbub</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;http://pubsubhubbub.appspot.com/publish&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">publish</span> <span class="n">feeds</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">callback</span> <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Successfully notified hub.&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">pub</span><span class="o">.</span><span class="n">errback</span>  <span class="p">{</span> <span class="nb">puts</span> <span class="s2">&quot;Uh oh, something broke: </span><span class="si">#{</span><span class="n">pub</span><span class="o">.</span><span class="n">response</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>参照</h2>

<p><a href="https://qiita.com/tackeyy/items/0d2079d901d495f50c1e">https://qiita.com/tackeyy/items/0d2079d901d495f50c1e</a><br/>
<a href="https://murashun.jp/blog/20150915-01.html">https://murashun.jp/blog/20150915-01.html</a><br/>
<a href="https://github.com/igrigorik/PubSubHubbub">https://github.com/igrigorik/PubSubHubbub</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastodon把握 - ③（FollowServiceの処理）]]></title>
    <link href="http://jq-jo.github.io/blog/2017/11/22/mastodon-follow02/"/>
    <updated>2017-11-22T13:40:02+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/11/22/mastodon-follow02</id>
    <content type="html"><![CDATA[<h2>callメソッド</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">source_account</span><span class="p">,</span> <span class="n">uri</span><span class="p">)</span>
</span><span class='line'>  <span class="n">target_account</span> <span class="o">=</span> <span class="no">ResolveRemoteAccountService</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span> <span class="k">if</span> <span class="n">target_account</span><span class="o">.</span><span class="n">nil?</span> <span class="o">||</span> <span class="n">target_account</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">source_account</span><span class="o">.</span><span class="n">id</span> <span class="o">||</span> <span class="n">target_account</span><span class="o">.</span><span class="n">suspended?</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">Mastodon</span><span class="o">::</span><span class="no">NotPermittedError</span>  <span class="k">if</span> <span class="n">target_account</span><span class="o">.</span><span class="n">blocking?</span><span class="p">(</span><span class="n">source_account</span><span class="p">)</span> <span class="o">||</span> <span class="n">source_account</span><span class="o">.</span><span class="n">blocking?</span><span class="p">(</span><span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">if</span> <span class="n">source_account</span><span class="o">.</span><span class="n">following?</span><span class="p">(</span><span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">target_account</span><span class="o">.</span><span class="n">locked?</span>
</span><span class='line'>    <span class="n">request_follow</span><span class="p">(</span><span class="n">source_account</span><span class="p">,</span> <span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">direct_follow</span><span class="p">(</span><span class="n">source_account</span><span class="p">,</span> <span class="n">target_account</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>基本的にfollowはターゲットユーザーが非公開アカウントかどうかによって処理が変わる。非公開アカウントの設定は<code>Account</code>モデルの<code>locked</code>というカラムに保存するようになっている。<br/>
まずターゲットユーザーが非公開アカウントじゃない場合から見てみると、<br/>
<code>direct_follow</code>というメソッドが呼ばれる。<br/>
<code>direct_follow</code>メソッドにはターゲットユーザーが<code>local</code>かどうかによって処理が変わる。ここの<code>local</code>っていうのは<code>Account</code>モデルの<code>domain</code>カラムがnilかどうかによって判断する。<br/>
ターゲットユーザーが<code>local</code>の場合はただメール通知が行われる。<code>local</code>じゃない場合は<code>Pubsubhubbub::SubscribeWorker</code>、<code>NotificationWorker</code>、<code>AfterRemoteFollowWorker</code>クラスが呼ばれる。</p>

<h2>Pubsubhubbub::SubscribeWorker</h2>

<ul>
<li>PubSubHubbubとは

<ul>
<li><a href="https://jq-jo.github.io/blog/2017/11/29/pubsubhubbub/">PubSubHubbub</a></li>
</ul>
</li>
<li>処理

<ul>
<li>SubscribeServiceを呼ぶ → ターゲットユーザーのAccountモデルに保存されているhub_urlを元にしてhubサーバーにrequestし、購読しているユーザーにみえるようにする。</li>
</ul>
</li>
</ul>


<h2>NotificationWorker</h2>

<ul>
<li>Salmon Protocolとは

<ul>
<li>また来週！</li>
</ul>
</li>
</ul>


<h2>AfterRemoteFollowWorker</h2>

<ul>
<li>Atom Protocolとは

<ul>
<li>また来週！</li>
</ul>
</li>
<li>処理

<ul>
<li>新しくアップデートされたターゲットユーザーの<code>locked</code>が<code>true</code>になっている場合は<code>follow</code>をキャンセルして再開<code>FollowService</code>を呼び出す。</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastodon把握 - ②]]></title>
    <link href="http://jq-jo.github.io/blog/2017/11/08/mastodon-follow/"/>
    <updated>2017-11-08T17:50:45+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/11/08/mastodon-follow</id>
    <content type="html"><![CDATA[<h2>フォロー</h2>

<ul>
<li><p><strong>Flow</strong><br/>
色んな細かい処理を行なっているが大きい処理を見てみると下記のようになる。</p>

<ol>
<li>フォロー情報の保存</li>
<li>プッシュ通知</li>
<li>購読の処理</li>
</ol>
</li>
</ul>


<p><br></p>

<ul>
<li>処理Flow</li>
</ul>


<p><img src="https://monosnap.com/file/vGLBLfDyD4s5COvelDp8MYZui5pXKj.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mastodon把握 - ①]]></title>
    <link href="http://jq-jo.github.io/blog/2017/10/18/mastodon-post/"/>
    <updated>2017-10-18T10:26:33+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/10/18/mastodon-post</id>
    <content type="html"><![CDATA[<h2>投稿</h2>

<ul>
<li>処理Flow</li>
</ul>


<p><img src="https://monosnap.com/file/QVqhw0WIHyJTAVI3oulFPaLhES8BMv.png" alt="Alt text" /></p>

<ul>
<li>簡単な説明

<ul>
<li>Frontend側

<ul>
<li>JSは細かくコンポーネント化になっていてそれのConnectのために<code>react-redux</code>というライブラリを利用</li>
</ul>
</li>
<li>Backend側

<ul>
<li>アーキテクチャとしてServiceクラスを主に使っている</li>
<li>それ以外には<code>app</code>の中に<code>lib</code>フォルダーを置き、処理のためのクラスを管理している</li>
</ul>
</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OJ Gem]]></title>
    <link href="http://jq-jo.github.io/blog/2017/10/04/oj-gem/"/>
    <updated>2017-10-04T10:24:30+09:00</updated>
    <id>http://jq-jo.github.io/blog/2017/10/04/oj-gem</id>
    <content type="html"><![CDATA[<h3>はじめ</h3>

<p>ウェブサービスをやっていく中にはAPIを取得することが多い。今みている<code>mastodon</code>では<code>OJ</code>という<code>Json parser</code>を使っていたので調べてみた。</p>

<h3>インストール</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install oj</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># in Gemfile
</span><span class='line'>gem 'oj'</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'oj'
</span><span class='line'>
</span><span class='line'>h = { 'one' =&gt; 1, 'array' =&gt; [ true, false ] }
</span><span class='line'>json = Oj.dump(h)
</span><span class='line'>
</span><span class='line'># json =
</span><span class='line'># {
</span><span class='line'>#   "one":1,
</span><span class='line'>#   "array":[
</span><span class='line'>#     true,
</span><span class='line'>#     false
</span><span class='line'>#   ]
</span><span class='line'># }
</span><span class='line'>
</span><span class='line'>h2 = Oj.load(json)
</span><span class='line'>puts "Same? #{h == h2}"
</span><span class='line'># true</span></code></pre></td></tr></table></div></figure>


<h3>他のParserとの比較</h3>

<ul>
<li><a href="https://github.com/evanphx/benchmark-ips">benchmark-ips</a>でベンチマークを取る</li>
<li>比較対象

<ul>
<li>JSON</li>
<li>yajl</li>
<li>oj</li>
</ul>
</li>
</ul>


<p>まずロカールにapiのコントローラーをよいする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">JsonCompareController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">test1</span><span class="p">:</span> <span class="s1">&#39;test1&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test2</span><span class="p">:</span> <span class="s1">&#39;test2&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test3</span><span class="p">:</span> <span class="s1">&#39;test3&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test4</span><span class="p">:</span> <span class="s1">&#39;test4&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test5</span><span class="p">:</span> <span class="s1">&#39;test5&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test6</span><span class="p">:</span> <span class="s1">&#39;test6&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test7</span><span class="p">:</span> <span class="s1">&#39;test7&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test8</span><span class="p">:</span> <span class="s1">&#39;test8&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test9</span><span class="p">:</span> <span class="s1">&#39;test9&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">test10</span><span class="p">:</span> <span class="s1">&#39;test10&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">json</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>それから比較するコードを書く。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">JsonCompare</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;yajl&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;oj&#39;</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;benchmark/ips&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compare</span>
</span><span class='line'>    <span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span> <span class="s2">&quot;http://localhost:3000/api/json_compare&quot;</span>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">get</span> <span class="n">uri</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Benchmark</span><span class="o">.</span><span class="n">ips</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;JSON.parse&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Yajl&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">Yajl</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;Oj&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="no">Oj</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">x</span><span class="o">.</span><span class="n">compare!</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>結果</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Warming</span> <span class="n">up</span> <span class="o">--------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>     <span class="mi">9</span><span class="o">.</span><span class="mi">786</span><span class="n">k</span> <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                <span class="no">Yajl</span>    <span class="mi">10</span><span class="o">.</span><span class="mi">364</span><span class="n">k</span> <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                  <span class="no">Oj</span>    <span class="mi">17</span><span class="o">.</span><span class="mo">00</span><span class="mi">9</span><span class="n">k</span> <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'><span class="no">Calculating</span> <span class="o">-------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>     <span class="mi">99</span><span class="o">.</span><span class="mo">053</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">2</span><span class="sx">%) i/s -    499.086k in   5.043910s</span>
</span><span class='line'><span class="sx">                Yajl    107.150k (± 3.4%)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>    <span class="mi">538</span><span class="o">.</span><span class="mi">928</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mo">036016</span><span class="n">s</span>
</span><span class='line'>                  <span class="no">Oj</span>    <span class="mi">183</span><span class="o">.</span><span class="mi">400</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="o">%</span><span class="p">)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>    <span class="mi">918</span><span class="o">.</span><span class="mi">486</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mo">012</span><span class="mi">844</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Comparison</span><span class="p">:</span>
</span><span class='line'>                  <span class="ss">Oj</span><span class="p">:</span>   <span class="mi">183399</span><span class="o">.</span><span class="mi">8</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'>                <span class="ss">Yajl</span><span class="p">:</span>   <span class="mi">107149</span><span class="o">.</span><span class="mi">6</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">71</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">:</span>    <span class="mi">99053</span><span class="o">.</span><span class="mi">1</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">85</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Benchmark::IPS::Report:0x007fdef3b04440</span>
</span><span class='line'> <span class="vi">@data</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@entries</span><span class="o">=</span>
</span><span class='line'>  <span class="o">[</span><span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdef8c3cbf0 @iterations=499086, @label=&quot;JSON.parse&quot;, @measurement_cycle=9786, @microseconds=5043910.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdef8c3cc68 @error=3164, @mean=99053.0983205518&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdef7a234a0 @iterations=538928, @label=&quot;Yajl&quot;, @measurement_cycle=10364, @microseconds=5036016.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdef7a23568 @error=3672, @mean=107149.64088869188&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdef89e6c98 @iterations=918486, @label=&quot;Oj&quot;, @measurement_cycle=17009, @microseconds=5012844.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdef89e6d10 @error=5584, @mean=183399.80361005384&gt;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>OJ</code>が<code>Yajl</code>よりは1.7倍、<code>JSON</code>よりは1.8倍速かった。<br/>
<code>String</code>じゃなくてモデルにしたらどうなるだろう。<br/>
apiコントローラーのコードを変えてみる。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="no">JsonCompareController</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@users</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="ss">:ok</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>ちなみに<code>User.count</code>は<code>100</code>。<br/>
さっきの比較コードを実行してみると、</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Warming</span> <span class="n">up</span> <span class="o">--------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>   <span class="mi">253</span><span class="o">.</span><span class="mo">000</span>  <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                <span class="no">Yajl</span>   <span class="mi">259</span><span class="o">.</span><span class="mo">000</span>  <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'>                  <span class="no">Oj</span>   <span class="mi">387</span><span class="o">.</span><span class="mo">000</span>  <span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="n">ms</span>
</span><span class='line'><span class="no">Calculating</span> <span class="o">-------------------------------------</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span>      <span class="mi">2</span><span class="o">.</span><span class="mi">529</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">4</span><span class="sx">%) i/s -     12.650k in   5.007160s</span>
</span><span class='line'><span class="sx">                Yajl      2.612k (± 2.6%)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>     <span class="mi">13</span><span class="o">.</span><span class="mi">209</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mo">061015</span><span class="n">s</span>
</span><span class='line'>                  <span class="no">Oj</span>      <span class="mi">3</span><span class="o">.</span><span class="mi">952</span><span class="n">k</span> <span class="p">(</span><span class="err">±</span> <span class="mi">3</span><span class="o">.</span><span class="mi">6</span><span class="o">%</span><span class="p">)</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span>     <span class="mi">20</span><span class="o">.</span><span class="mi">124</span><span class="n">k</span> <span class="k">in</span>   <span class="mi">5</span><span class="o">.</span><span class="mi">098328</span><span class="n">s</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Comparison</span><span class="p">:</span>
</span><span class='line'>                  <span class="ss">Oj</span><span class="p">:</span>     <span class="mi">3952</span><span class="o">.</span><span class="mi">4</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span>
</span><span class='line'>                <span class="ss">Yajl</span><span class="p">:</span>     <span class="mi">2611</span><span class="o">.</span><span class="mi">7</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">51</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>          <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">:</span>     <span class="mi">2529</span><span class="o">.</span><span class="mi">5</span> <span class="n">i</span><span class="o">/</span><span class="n">s</span> <span class="o">-</span> <span class="mi">1</span><span class="o">.</span><span class="mi">56</span><span class="n">x</span>  <span class="n">slower</span>
</span><span class='line'>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;Benchmark::IPS::Report:0x007fdf594c4678</span>
</span><span class='line'> <span class="vi">@data</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span>
</span><span class='line'> <span class="vi">@entries</span><span class="o">=</span>
</span><span class='line'>  <span class="o">[</span><span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdf5da291a0 @iterations=12650, @label=&quot;JSON.parse&quot;, @measurement_cycle=253, @microseconds=5007160.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdf5da29268 @error=87, @mean=2529.463823054468&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdf5a59b8c0 @iterations=13209, @label=&quot;Yajl&quot;, @measurement_cycle=259, @microseconds=5061015.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdf5a59ba28 @error=67, @mean=2611.693591724044&gt;&gt;,</span>
</span><span class='line'>   <span class="c1">#&lt;Benchmark::IPS::Report::Entry:0x007fdf5d821510 @iterations=20124, @label=&quot;Oj&quot;, @measurement_cycle=387, @microseconds=5098328.0, @show_total_time=true, @stats=#&lt;Benchmark::IPS::Stats::SD:0x007fdf5d821588 @error=141, @mean=3952.373849831794&gt;&gt;]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>OJ</code>が<code>Yajl</code>、<code>JSON</code>より1.5倍速いことがわかる。</p>

<h3>まとめ</h3>

<p>単純に速度のパフォーマンス側をみると<code>OJ</code>を使った方が良さそう！</p>

<h2>追記</h2>

<h3>mastodonでのOJの使い方</h3>

<ul>
<li>emoji.jsonの変換</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/lib/emoji.rb</span>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">Oj</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;lib&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;emoji.json&#39;</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>serviceクラスでのpayload作成</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/services/batched_remove_status_service.rb</span>
</span><span class='line'><span class="vi">@json_payloads</span> <span class="o">=</span> <span class="n">statuses</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="o">[</span><span class="n">s</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_h</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/services/fan_out_on_write_service.rb</span>
</span><span class='line'><span class="vi">@payload</span> <span class="o">=</span> <span class="no">InlineRenderer</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">status</span><span class="p">,</span> <span class="kp">nil</span><span class="p">,</span> <span class="ss">:status</span><span class="p">)</span>
</span><span class='line'><span class="vi">@payload</span> <span class="o">=</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:update</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="vi">@payload</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/services/notify_service.rb</span>
</span><span class='line'><span class="no">Redis</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s2">&quot;timeline:</span><span class="si">#{</span><span class="vi">@recipient</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:notification</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="no">InlineRenderer</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="vi">@notification</span><span class="p">,</span> <span class="vi">@recipient</span><span class="p">,</span> <span class="ss">:notification</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># app/services/remove_status_service.rb</span>
</span><span class='line'><span class="vi">@payload</span> <span class="o">=</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="ss">event</span><span class="p">:</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">payload</span><span class="p">:</span> <span class="n">status</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>reactコンポーネントへのprops</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="c">// app/views/home/index.html.haml</span>
</span><span class='line'><span class="nc">.app-holder</span><span class="nf">#mastodon</span><span class="p">{</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">props</span><span class="p">:</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">default_props</span><span class="p">)</span> <span class="p">}</span> }
</span><span class='line'>
</span><span class='line'><span class="c">// app/views/about/show.html.haml</span>
</span><span class='line'><span class="nf">#mastodon-timeline</span><span class="p">{</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="ss">props</span><span class="p">:</span> <span class="no">Oj</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">default_props</span><span class="p">)</span> <span class="p">}</span> }
</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<p><a href="http://blog.toshimaru.net/json-parser-benchmark/">RubyのJSONパーサーのパース速度比較</a><br/>
<a href="https://github.com/ohler55/oj">OJ Github</a></p>
]]></content>
  </entry>
  
</feed>
